// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MenuSet is an object representing the database table.
type MenuSet struct {
	SetID         int               `boil:"set_id" json:"set_id" toml:"set_id" yaml:"set_id"`
	StoreID       null.Int          `boil:"store_id" json:"store_id,omitempty" toml:"store_id" yaml:"store_id,omitempty"`
	SetName       null.String       `boil:"set_name" json:"set_name,omitempty" toml:"set_name" yaml:"set_name,omitempty"`
	SetPrice      types.NullDecimal `boil:"set_price" json:"set_price,omitempty" toml:"set_price" yaml:"set_price,omitempty"`
	CreatedAt     time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedBy     null.Int          `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	CreatedByType string            `boil:"created_by_type" json:"created_by_type" toml:"created_by_type" yaml:"created_by_type"`
	UpdatedBy     null.Int          `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	UpdatedByType string            `boil:"updated_by_type" json:"updated_by_type" toml:"updated_by_type" yaml:"updated_by_type"`

	R *menuSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuSetColumns = struct {
	SetID         string
	StoreID       string
	SetName       string
	SetPrice      string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	CreatedByType string
	UpdatedBy     string
	UpdatedByType string
}{
	SetID:         "set_id",
	StoreID:       "store_id",
	SetName:       "set_name",
	SetPrice:      "set_price",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	CreatedBy:     "created_by",
	CreatedByType: "created_by_type",
	UpdatedBy:     "updated_by",
	UpdatedByType: "updated_by_type",
}

var MenuSetTableColumns = struct {
	SetID         string
	StoreID       string
	SetName       string
	SetPrice      string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	CreatedByType string
	UpdatedBy     string
	UpdatedByType string
}{
	SetID:         "menu_sets.set_id",
	StoreID:       "menu_sets.store_id",
	SetName:       "menu_sets.set_name",
	SetPrice:      "menu_sets.set_price",
	CreatedAt:     "menu_sets.created_at",
	UpdatedAt:     "menu_sets.updated_at",
	CreatedBy:     "menu_sets.created_by",
	CreatedByType: "menu_sets.created_by_type",
	UpdatedBy:     "menu_sets.updated_by",
	UpdatedByType: "menu_sets.updated_by_type",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var MenuSetWhere = struct {
	SetID         whereHelperint
	StoreID       whereHelpernull_Int
	SetName       whereHelpernull_String
	SetPrice      whereHelpertypes_NullDecimal
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	CreatedBy     whereHelpernull_Int
	CreatedByType whereHelperstring
	UpdatedBy     whereHelpernull_Int
	UpdatedByType whereHelperstring
}{
	SetID:         whereHelperint{field: "`menu_sets`.`set_id`"},
	StoreID:       whereHelpernull_Int{field: "`menu_sets`.`store_id`"},
	SetName:       whereHelpernull_String{field: "`menu_sets`.`set_name`"},
	SetPrice:      whereHelpertypes_NullDecimal{field: "`menu_sets`.`set_price`"},
	CreatedAt:     whereHelpertime_Time{field: "`menu_sets`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`menu_sets`.`updated_at`"},
	CreatedBy:     whereHelpernull_Int{field: "`menu_sets`.`created_by`"},
	CreatedByType: whereHelperstring{field: "`menu_sets`.`created_by_type`"},
	UpdatedBy:     whereHelpernull_Int{field: "`menu_sets`.`updated_by`"},
	UpdatedByType: whereHelperstring{field: "`menu_sets`.`updated_by_type`"},
}

// MenuSetRels is where relationship names are stored.
var MenuSetRels = struct {
	Store             string
	SetMenuSetDetails string
}{
	Store:             "Store",
	SetMenuSetDetails: "SetMenuSetDetails",
}

// menuSetR is where relationships are stored.
type menuSetR struct {
	Store             *Store             `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
	SetMenuSetDetails MenuSetDetailSlice `boil:"SetMenuSetDetails" json:"SetMenuSetDetails" toml:"SetMenuSetDetails" yaml:"SetMenuSetDetails"`
}

// NewStruct creates a new relationship struct
func (*menuSetR) NewStruct() *menuSetR {
	return &menuSetR{}
}

func (r *menuSetR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

func (r *menuSetR) GetSetMenuSetDetails() MenuSetDetailSlice {
	if r == nil {
		return nil
	}
	return r.SetMenuSetDetails
}

// menuSetL is where Load methods for each relationship are stored.
type menuSetL struct{}

var (
	menuSetAllColumns            = []string{"set_id", "store_id", "set_name", "set_price", "created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	menuSetColumnsWithoutDefault = []string{"set_id", "store_id", "set_name", "set_price"}
	menuSetColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	menuSetPrimaryKeyColumns     = []string{"set_id"}
	menuSetGeneratedColumns      = []string{}
)

type (
	// MenuSetSlice is an alias for a slice of pointers to MenuSet.
	// This should almost always be used instead of []MenuSet.
	MenuSetSlice []*MenuSet
	// MenuSetHook is the signature for custom MenuSet hook methods
	MenuSetHook func(context.Context, boil.ContextExecutor, *MenuSet) error

	menuSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuSetType                 = reflect.TypeOf(&MenuSet{})
	menuSetMapping              = queries.MakeStructMapping(menuSetType)
	menuSetPrimaryKeyMapping, _ = queries.BindMapping(menuSetType, menuSetMapping, menuSetPrimaryKeyColumns)
	menuSetInsertCacheMut       sync.RWMutex
	menuSetInsertCache          = make(map[string]insertCache)
	menuSetUpdateCacheMut       sync.RWMutex
	menuSetUpdateCache          = make(map[string]updateCache)
	menuSetUpsertCacheMut       sync.RWMutex
	menuSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var menuSetAfterSelectHooks []MenuSetHook

var menuSetBeforeInsertHooks []MenuSetHook
var menuSetAfterInsertHooks []MenuSetHook

var menuSetBeforeUpdateHooks []MenuSetHook
var menuSetAfterUpdateHooks []MenuSetHook

var menuSetBeforeDeleteHooks []MenuSetHook
var menuSetAfterDeleteHooks []MenuSetHook

var menuSetBeforeUpsertHooks []MenuSetHook
var menuSetAfterUpsertHooks []MenuSetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MenuSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MenuSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MenuSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MenuSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MenuSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MenuSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MenuSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MenuSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MenuSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMenuSetHook registers your hook function for all future operations.
func AddMenuSetHook(hookPoint boil.HookPoint, menuSetHook MenuSetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		menuSetAfterSelectHooks = append(menuSetAfterSelectHooks, menuSetHook)
	case boil.BeforeInsertHook:
		menuSetBeforeInsertHooks = append(menuSetBeforeInsertHooks, menuSetHook)
	case boil.AfterInsertHook:
		menuSetAfterInsertHooks = append(menuSetAfterInsertHooks, menuSetHook)
	case boil.BeforeUpdateHook:
		menuSetBeforeUpdateHooks = append(menuSetBeforeUpdateHooks, menuSetHook)
	case boil.AfterUpdateHook:
		menuSetAfterUpdateHooks = append(menuSetAfterUpdateHooks, menuSetHook)
	case boil.BeforeDeleteHook:
		menuSetBeforeDeleteHooks = append(menuSetBeforeDeleteHooks, menuSetHook)
	case boil.AfterDeleteHook:
		menuSetAfterDeleteHooks = append(menuSetAfterDeleteHooks, menuSetHook)
	case boil.BeforeUpsertHook:
		menuSetBeforeUpsertHooks = append(menuSetBeforeUpsertHooks, menuSetHook)
	case boil.AfterUpsertHook:
		menuSetAfterUpsertHooks = append(menuSetAfterUpsertHooks, menuSetHook)
	}
}

// OneG returns a single menuSet record from the query using the global executor.
func (q menuSetQuery) OneG(ctx context.Context) (*MenuSet, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single menuSet record from the query.
func (q menuSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MenuSet, error) {
	o := &MenuSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for menu_sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MenuSet records from the query using the global executor.
func (q menuSetQuery) AllG(ctx context.Context) (MenuSetSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MenuSet records from the query.
func (q menuSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuSetSlice, error) {
	var o []*MenuSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MenuSet slice")
	}

	if len(menuSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MenuSet records in the query using the global executor
func (q menuSetQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MenuSet records in the query.
func (q menuSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count menu_sets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q menuSetQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q menuSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if menu_sets exists")
	}

	return count > 0, nil
}

// Store pointed to by the foreign key.
func (o *MenuSet) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`store_id` = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// SetMenuSetDetails retrieves all the menu_set_detail's MenuSetDetails with an executor via set_id column.
func (o *MenuSet) SetMenuSetDetails(mods ...qm.QueryMod) menuSetDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`menu_set_details`.`set_id`=?", o.SetID),
	)

	return MenuSetDetails(queryMods...)
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuSetL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuSet interface{}, mods queries.Applicator) error {
	var slice []*MenuSet
	var object *MenuSet

	if singular {
		var ok bool
		object, ok = maybeMenuSet.(*MenuSet)
		if !ok {
			object = new(MenuSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuSet))
			}
		}
	} else {
		s, ok := maybeMenuSet.(*[]*MenuSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuSet))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuSetR{}
		}
		if !queries.IsNil(object.StoreID) {
			args = append(args, object.StoreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuSetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StoreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StoreID) {
				args = append(args, obj.StoreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stores`),
		qm.WhereIn(`stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.MenuSets = append(foreign.R.MenuSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.MenuSets = append(foreign.R.MenuSets, local)
				break
			}
		}
	}

	return nil
}

// LoadSetMenuSetDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuSetL) LoadSetMenuSetDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuSet interface{}, mods queries.Applicator) error {
	var slice []*MenuSet
	var object *MenuSet

	if singular {
		var ok bool
		object, ok = maybeMenuSet.(*MenuSet)
		if !ok {
			object = new(MenuSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuSet))
			}
		}
	} else {
		s, ok := maybeMenuSet.(*[]*MenuSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuSet))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuSetR{}
		}
		args = append(args, object.SetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuSetR{}
			}

			for _, a := range args {
				if a == obj.SetID {
					continue Outer
				}
			}

			args = append(args, obj.SetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_set_details`),
		qm.WhereIn(`menu_set_details.set_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_set_details")
	}

	var resultSlice []*MenuSetDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_set_details")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_set_details")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_set_details")
	}

	if len(menuSetDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SetMenuSetDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuSetDetailR{}
			}
			foreign.R.Set = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SetID == foreign.SetID {
				local.R.SetMenuSetDetails = append(local.R.SetMenuSetDetails, foreign)
				if foreign.R == nil {
					foreign.R = &menuSetDetailR{}
				}
				foreign.R.Set = local
				break
			}
		}
	}

	return nil
}

// SetStoreG of the menuSet to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.MenuSets.
// Uses the global database handle.
func (o *MenuSet) SetStoreG(ctx context.Context, insert bool, related *Store) error {
	return o.SetStore(ctx, boil.GetContextDB(), insert, related)
}

// SetStore of the menuSet to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.MenuSets.
func (o *MenuSet) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `menu_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, menuSetPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.SetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StoreID, related.StoreID)
	if o.R == nil {
		o.R = &menuSetR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			MenuSets: MenuSetSlice{o},
		}
	} else {
		related.R.MenuSets = append(related.R.MenuSets, o)
	}

	return nil
}

// RemoveStoreG relationship.
// Sets o.R.Store to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *MenuSet) RemoveStoreG(ctx context.Context, related *Store) error {
	return o.RemoveStore(ctx, boil.GetContextDB(), related)
}

// RemoveStore relationship.
// Sets o.R.Store to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuSet) RemoveStore(ctx context.Context, exec boil.ContextExecutor, related *Store) error {
	var err error

	queries.SetScanner(&o.StoreID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("store_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Store = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuSets {
		if queries.Equal(o.StoreID, ri.StoreID) {
			continue
		}

		ln := len(related.R.MenuSets)
		if ln > 1 && i < ln-1 {
			related.R.MenuSets[i] = related.R.MenuSets[ln-1]
		}
		related.R.MenuSets = related.R.MenuSets[:ln-1]
		break
	}
	return nil
}

// AddSetMenuSetDetailsG adds the given related objects to the existing relationships
// of the menu_set, optionally inserting them as new records.
// Appends related to o.R.SetMenuSetDetails.
// Sets related.R.Set appropriately.
// Uses the global database handle.
func (o *MenuSet) AddSetMenuSetDetailsG(ctx context.Context, insert bool, related ...*MenuSetDetail) error {
	return o.AddSetMenuSetDetails(ctx, boil.GetContextDB(), insert, related...)
}

// AddSetMenuSetDetails adds the given related objects to the existing relationships
// of the menu_set, optionally inserting them as new records.
// Appends related to o.R.SetMenuSetDetails.
// Sets related.R.Set appropriately.
func (o *MenuSet) AddSetMenuSetDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuSetDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SetID = o.SetID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `menu_set_details` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"set_id"}),
				strmangle.WhereClause("`", "`", 0, menuSetDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.SetID, rel.SetID, rel.StoreID, rel.MenuID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SetID = o.SetID
		}
	}

	if o.R == nil {
		o.R = &menuSetR{
			SetMenuSetDetails: related,
		}
	} else {
		o.R.SetMenuSetDetails = append(o.R.SetMenuSetDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuSetDetailR{
				Set: o,
			}
		} else {
			rel.R.Set = o
		}
	}
	return nil
}

// MenuSets retrieves all the records using an executor.
func MenuSets(mods ...qm.QueryMod) menuSetQuery {
	mods = append(mods, qm.From("`menu_sets`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`menu_sets`.*"})
	}

	return menuSetQuery{q}
}

// FindMenuSetG retrieves a single record by ID.
func FindMenuSetG(ctx context.Context, setID int, selectCols ...string) (*MenuSet, error) {
	return FindMenuSet(ctx, boil.GetContextDB(), setID, selectCols...)
}

// FindMenuSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuSet(ctx context.Context, exec boil.ContextExecutor, setID int, selectCols ...string) (*MenuSet, error) {
	menuSetObj := &MenuSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `menu_sets` where `set_id`=?", sel,
	)

	q := queries.Raw(query, setID)

	err := q.Bind(ctx, exec, menuSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from menu_sets")
	}

	if err = menuSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return menuSetObj, err
	}

	return menuSetObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MenuSet) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_sets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuSetInsertCacheMut.RLock()
	cache, cached := menuSetInsertCache[key]
	menuSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuSetAllColumns,
			menuSetColumnsWithDefault,
			menuSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuSetType, menuSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuSetType, menuSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `menu_sets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `menu_sets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `menu_sets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, menuSetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into menu_sets")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SetID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for menu_sets")
	}

CacheNoHooks:
	if !cached {
		menuSetInsertCacheMut.Lock()
		menuSetInsertCache[key] = cache
		menuSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MenuSet record using the global executor.
// See Update for more documentation.
func (o *MenuSet) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MenuSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	menuSetUpdateCacheMut.RLock()
	cache, cached := menuSetUpdateCache[key]
	menuSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuSetAllColumns,
			menuSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update menu_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `menu_sets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, menuSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuSetType, menuSetMapping, append(wl, menuSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update menu_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for menu_sets")
	}

	if !cached {
		menuSetUpdateCacheMut.Lock()
		menuSetUpdateCache[key] = cache
		menuSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q menuSetQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q menuSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for menu_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for menu_sets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MenuSetSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `menu_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in menuSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all menuSet")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MenuSet) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMenuSetUniqueColumns = []string{
	"set_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_sets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuSetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMenuSetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuSetUpsertCacheMut.RLock()
	cache, cached := menuSetUpsertCache[key]
	menuSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			menuSetAllColumns,
			menuSetColumnsWithDefault,
			menuSetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuSetAllColumns,
			menuSetPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert menu_sets, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`menu_sets`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `menu_sets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(menuSetType, menuSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuSetType, menuSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for menu_sets")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(menuSetType, menuSetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for menu_sets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for menu_sets")
	}

CacheNoHooks:
	if !cached {
		menuSetUpsertCacheMut.Lock()
		menuSetUpsertCache[key] = cache
		menuSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MenuSet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MenuSet) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MenuSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MenuSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuSetPrimaryKeyMapping)
	sql := "DELETE FROM `menu_sets` WHERE `set_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from menu_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for menu_sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q menuSetQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q menuSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no menuSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menu_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_sets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MenuSetSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(menuSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `menu_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menuSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_sets")
	}

	if len(menuSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MenuSet) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MenuSet provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenuSet(ctx, exec, o.SetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSetSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MenuSetSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `menu_sets`.* FROM `menu_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MenuSetSlice")
	}

	*o = slice

	return nil
}

// MenuSetExistsG checks if the MenuSet row exists.
func MenuSetExistsG(ctx context.Context, setID int) (bool, error) {
	return MenuSetExists(ctx, boil.GetContextDB(), setID)
}

// MenuSetExists checks if the MenuSet row exists.
func MenuSetExists(ctx context.Context, exec boil.ContextExecutor, setID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `menu_sets` where `set_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, setID)
	}
	row := exec.QueryRowContext(ctx, sql, setID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if menu_sets exists")
	}

	return exists, nil
}

// Exists checks if the MenuSet row exists.
func (o *MenuSet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuSetExists(ctx, exec, o.SetID)
}
