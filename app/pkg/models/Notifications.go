// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Notification is an object representing the database table.
type Notification struct {
	NotificationID      int         `boil:"notification_id" json:"notification_id" toml:"notification_id" yaml:"notification_id"`
	CustomerID          null.Int    `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	ReservationID       null.Int    `boil:"reservation_id" json:"reservation_id,omitempty" toml:"reservation_id" yaml:"reservation_id,omitempty"`
	NotificationType    null.Int    `boil:"notification_type" json:"notification_type,omitempty" toml:"notification_type" yaml:"notification_type,omitempty"`
	NotificationContent null.String `boil:"notification_content" json:"notification_content,omitempty" toml:"notification_content" yaml:"notification_content,omitempty"`
	NotificationStatus  null.Int    `boil:"notification_status" json:"notification_status,omitempty" toml:"notification_status" yaml:"notification_status,omitempty"`
	CreatedAt           time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedBy           null.Int    `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	CreatedByType       string      `boil:"created_by_type" json:"created_by_type" toml:"created_by_type" yaml:"created_by_type"`
	UpdatedBy           null.Int    `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	UpdatedByType       string      `boil:"updated_by_type" json:"updated_by_type" toml:"updated_by_type" yaml:"updated_by_type"`

	R *notificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationColumns = struct {
	NotificationID      string
	CustomerID          string
	ReservationID       string
	NotificationType    string
	NotificationContent string
	NotificationStatus  string
	CreatedAt           string
	UpdatedAt           string
	CreatedBy           string
	CreatedByType       string
	UpdatedBy           string
	UpdatedByType       string
}{
	NotificationID:      "notification_id",
	CustomerID:          "customer_id",
	ReservationID:       "reservation_id",
	NotificationType:    "notification_type",
	NotificationContent: "notification_content",
	NotificationStatus:  "notification_status",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	CreatedBy:           "created_by",
	CreatedByType:       "created_by_type",
	UpdatedBy:           "updated_by",
	UpdatedByType:       "updated_by_type",
}

var NotificationTableColumns = struct {
	NotificationID      string
	CustomerID          string
	ReservationID       string
	NotificationType    string
	NotificationContent string
	NotificationStatus  string
	CreatedAt           string
	UpdatedAt           string
	CreatedBy           string
	CreatedByType       string
	UpdatedBy           string
	UpdatedByType       string
}{
	NotificationID:      "notifications.notification_id",
	CustomerID:          "notifications.customer_id",
	ReservationID:       "notifications.reservation_id",
	NotificationType:    "notifications.notification_type",
	NotificationContent: "notifications.notification_content",
	NotificationStatus:  "notifications.notification_status",
	CreatedAt:           "notifications.created_at",
	UpdatedAt:           "notifications.updated_at",
	CreatedBy:           "notifications.created_by",
	CreatedByType:       "notifications.created_by_type",
	UpdatedBy:           "notifications.updated_by",
	UpdatedByType:       "notifications.updated_by_type",
}

// Generated where

var NotificationWhere = struct {
	NotificationID      whereHelperint
	CustomerID          whereHelpernull_Int
	ReservationID       whereHelpernull_Int
	NotificationType    whereHelpernull_Int
	NotificationContent whereHelpernull_String
	NotificationStatus  whereHelpernull_Int
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	CreatedBy           whereHelpernull_Int
	CreatedByType       whereHelperstring
	UpdatedBy           whereHelpernull_Int
	UpdatedByType       whereHelperstring
}{
	NotificationID:      whereHelperint{field: "`notifications`.`notification_id`"},
	CustomerID:          whereHelpernull_Int{field: "`notifications`.`customer_id`"},
	ReservationID:       whereHelpernull_Int{field: "`notifications`.`reservation_id`"},
	NotificationType:    whereHelpernull_Int{field: "`notifications`.`notification_type`"},
	NotificationContent: whereHelpernull_String{field: "`notifications`.`notification_content`"},
	NotificationStatus:  whereHelpernull_Int{field: "`notifications`.`notification_status`"},
	CreatedAt:           whereHelpertime_Time{field: "`notifications`.`created_at`"},
	UpdatedAt:           whereHelpertime_Time{field: "`notifications`.`updated_at`"},
	CreatedBy:           whereHelpernull_Int{field: "`notifications`.`created_by`"},
	CreatedByType:       whereHelperstring{field: "`notifications`.`created_by_type`"},
	UpdatedBy:           whereHelpernull_Int{field: "`notifications`.`updated_by`"},
	UpdatedByType:       whereHelperstring{field: "`notifications`.`updated_by_type`"},
}

// NotificationRels is where relationship names are stored.
var NotificationRels = struct {
	Customer    string
	Reservation string
}{
	Customer:    "Customer",
	Reservation: "Reservation",
}

// notificationR is where relationships are stored.
type notificationR struct {
	Customer    *Customer    `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	Reservation *Reservation `boil:"Reservation" json:"Reservation" toml:"Reservation" yaml:"Reservation"`
}

// NewStruct creates a new relationship struct
func (*notificationR) NewStruct() *notificationR {
	return &notificationR{}
}

func (r *notificationR) GetCustomer() *Customer {
	if r == nil {
		return nil
	}
	return r.Customer
}

func (r *notificationR) GetReservation() *Reservation {
	if r == nil {
		return nil
	}
	return r.Reservation
}

// notificationL is where Load methods for each relationship are stored.
type notificationL struct{}

var (
	notificationAllColumns            = []string{"notification_id", "customer_id", "reservation_id", "notification_type", "notification_content", "notification_status", "created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	notificationColumnsWithoutDefault = []string{"notification_id", "customer_id", "reservation_id", "notification_type", "notification_content", "notification_status"}
	notificationColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	notificationPrimaryKeyColumns     = []string{"notification_id"}
	notificationGeneratedColumns      = []string{}
)

type (
	// NotificationSlice is an alias for a slice of pointers to Notification.
	// This should almost always be used instead of []Notification.
	NotificationSlice []*Notification
	// NotificationHook is the signature for custom Notification hook methods
	NotificationHook func(context.Context, boil.ContextExecutor, *Notification) error

	notificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationType                 = reflect.TypeOf(&Notification{})
	notificationMapping              = queries.MakeStructMapping(notificationType)
	notificationPrimaryKeyMapping, _ = queries.BindMapping(notificationType, notificationMapping, notificationPrimaryKeyColumns)
	notificationInsertCacheMut       sync.RWMutex
	notificationInsertCache          = make(map[string]insertCache)
	notificationUpdateCacheMut       sync.RWMutex
	notificationUpdateCache          = make(map[string]updateCache)
	notificationUpsertCacheMut       sync.RWMutex
	notificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationAfterSelectHooks []NotificationHook

var notificationBeforeInsertHooks []NotificationHook
var notificationAfterInsertHooks []NotificationHook

var notificationBeforeUpdateHooks []NotificationHook
var notificationAfterUpdateHooks []NotificationHook

var notificationBeforeDeleteHooks []NotificationHook
var notificationAfterDeleteHooks []NotificationHook

var notificationBeforeUpsertHooks []NotificationHook
var notificationAfterUpsertHooks []NotificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Notification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Notification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Notification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Notification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Notification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Notification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Notification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Notification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Notification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationHook registers your hook function for all future operations.
func AddNotificationHook(hookPoint boil.HookPoint, notificationHook NotificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		notificationAfterSelectHooks = append(notificationAfterSelectHooks, notificationHook)
	case boil.BeforeInsertHook:
		notificationBeforeInsertHooks = append(notificationBeforeInsertHooks, notificationHook)
	case boil.AfterInsertHook:
		notificationAfterInsertHooks = append(notificationAfterInsertHooks, notificationHook)
	case boil.BeforeUpdateHook:
		notificationBeforeUpdateHooks = append(notificationBeforeUpdateHooks, notificationHook)
	case boil.AfterUpdateHook:
		notificationAfterUpdateHooks = append(notificationAfterUpdateHooks, notificationHook)
	case boil.BeforeDeleteHook:
		notificationBeforeDeleteHooks = append(notificationBeforeDeleteHooks, notificationHook)
	case boil.AfterDeleteHook:
		notificationAfterDeleteHooks = append(notificationAfterDeleteHooks, notificationHook)
	case boil.BeforeUpsertHook:
		notificationBeforeUpsertHooks = append(notificationBeforeUpsertHooks, notificationHook)
	case boil.AfterUpsertHook:
		notificationAfterUpsertHooks = append(notificationAfterUpsertHooks, notificationHook)
	}
}

// OneG returns a single notification record from the query using the global executor.
func (q notificationQuery) OneG(ctx context.Context) (*Notification, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single notification record from the query.
func (q notificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Notification, error) {
	o := &Notification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notifications")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Notification records from the query using the global executor.
func (q notificationQuery) AllG(ctx context.Context) (NotificationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Notification records from the query.
func (q notificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationSlice, error) {
	var o []*Notification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Notification slice")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Notification records in the query using the global executor
func (q notificationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Notification records in the query.
func (q notificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notifications rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q notificationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q notificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notifications exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *Notification) Customer(mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`customer_id` = ?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	return Customers(queryMods...)
}

// Reservation pointed to by the foreign key.
func (o *Notification) Reservation(mods ...qm.QueryMod) reservationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`reservation_id` = ?", o.ReservationID),
	}

	queryMods = append(queryMods, mods...)

	return Reservations(queryMods...)
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotification interface{}, mods queries.Applicator) error {
	var slice []*Notification
	var object *Notification

	if singular {
		var ok bool
		object, ok = maybeNotification.(*Notification)
		if !ok {
			object = new(Notification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotification))
			}
		}
	} else {
		s, ok := maybeNotification.(*[]*Notification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotification))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		if !queries.IsNil(object.CustomerID) {
			args = append(args, object.CustomerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CustomerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CustomerID) {
				args = append(args, obj.CustomerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`customers`),
		qm.WhereIn(`customers.customer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customers")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &customerR{}
		}
		foreign.R.Notifications = append(foreign.R.Notifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CustomerID, foreign.CustomerID) {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.Notifications = append(foreign.R.Notifications, local)
				break
			}
		}
	}

	return nil
}

// LoadReservation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationL) LoadReservation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotification interface{}, mods queries.Applicator) error {
	var slice []*Notification
	var object *Notification

	if singular {
		var ok bool
		object, ok = maybeNotification.(*Notification)
		if !ok {
			object = new(Notification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotification))
			}
		}
	} else {
		s, ok := maybeNotification.(*[]*Notification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotification))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		if !queries.IsNil(object.ReservationID) {
			args = append(args, object.ReservationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ReservationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ReservationID) {
				args = append(args, obj.ReservationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reservations`),
		qm.WhereIn(`reservations.reservation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reservation")
	}

	var resultSlice []*Reservation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reservation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reservations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reservations")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reservation = foreign
		if foreign.R == nil {
			foreign.R = &reservationR{}
		}
		foreign.R.Notifications = append(foreign.R.Notifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReservationID, foreign.ReservationID) {
				local.R.Reservation = foreign
				if foreign.R == nil {
					foreign.R = &reservationR{}
				}
				foreign.R.Notifications = append(foreign.R.Notifications, local)
				break
			}
		}
	}

	return nil
}

// SetCustomerG of the notification to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetCustomerG(ctx context.Context, insert bool, related *Customer) error {
	return o.SetCustomer(ctx, boil.GetContextDB(), insert, related)
}

// SetCustomer of the notification to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notifications` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
		strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.CustomerID, o.NotificationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CustomerID, related.CustomerID)
	if o.R == nil {
		o.R = &notificationR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemoveCustomerG relationship.
// Sets o.R.Customer to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Notification) RemoveCustomerG(ctx context.Context, related *Customer) error {
	return o.RemoveCustomer(ctx, boil.GetContextDB(), related)
}

// RemoveCustomer relationship.
// Sets o.R.Customer to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Notification) RemoveCustomer(ctx context.Context, exec boil.ContextExecutor, related *Customer) error {
	var err error

	queries.SetScanner(&o.CustomerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("customer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Customer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if queries.Equal(o.CustomerID, ri.CustomerID) {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// SetReservationG of the notification to the related item.
// Sets o.R.Reservation to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetReservationG(ctx context.Context, insert bool, related *Reservation) error {
	return o.SetReservation(ctx, boil.GetContextDB(), insert, related)
}

// SetReservation of the notification to the related item.
// Sets o.R.Reservation to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetReservation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reservation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notifications` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reservation_id"}),
		strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ReservationID, o.NotificationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReservationID, related.ReservationID)
	if o.R == nil {
		o.R = &notificationR{
			Reservation: related,
		}
	} else {
		o.R.Reservation = related
	}

	if related.R == nil {
		related.R = &reservationR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemoveReservationG relationship.
// Sets o.R.Reservation to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Notification) RemoveReservationG(ctx context.Context, related *Reservation) error {
	return o.RemoveReservation(ctx, boil.GetContextDB(), related)
}

// RemoveReservation relationship.
// Sets o.R.Reservation to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Notification) RemoveReservation(ctx context.Context, exec boil.ContextExecutor, related *Reservation) error {
	var err error

	queries.SetScanner(&o.ReservationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("reservation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Reservation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if queries.Equal(o.ReservationID, ri.ReservationID) {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// Notifications retrieves all the records using an executor.
func Notifications(mods ...qm.QueryMod) notificationQuery {
	mods = append(mods, qm.From("`notifications`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`notifications`.*"})
	}

	return notificationQuery{q}
}

// FindNotificationG retrieves a single record by ID.
func FindNotificationG(ctx context.Context, notificationID int, selectCols ...string) (*Notification, error) {
	return FindNotification(ctx, boil.GetContextDB(), notificationID, selectCols...)
}

// FindNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotification(ctx context.Context, exec boil.ContextExecutor, notificationID int, selectCols ...string) (*Notification, error) {
	notificationObj := &Notification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notifications` where `notification_id`=?", sel,
	)

	q := queries.Raw(query, notificationID)

	err := q.Bind(ctx, exec, notificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notifications")
	}

	if err = notificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationObj, err
	}

	return notificationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Notification) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Notification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notifications provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationInsertCacheMut.RLock()
	cache, cached := notificationInsertCache[key]
	notificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationAllColumns,
			notificationColumnsWithDefault,
			notificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationType, notificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notifications` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notifications` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notifications` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notifications")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NotificationID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notifications")
	}

CacheNoHooks:
	if !cached {
		notificationInsertCacheMut.Lock()
		notificationInsertCache[key] = cache
		notificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Notification record using the global executor.
// See Update for more documentation.
func (o *Notification) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Notification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Notification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationUpdateCacheMut.RLock()
	cache, cached := notificationUpdateCache[key]
	notificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationAllColumns,
			notificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notifications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notifications` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, append(wl, notificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notifications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notifications")
	}

	if !cached {
		notificationUpdateCacheMut.Lock()
		notificationUpdateCache[key] = cache
		notificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q notificationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notifications")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NotificationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notifications` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notification")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Notification) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLNotificationUniqueColumns = []string{
	"notification_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Notification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notifications provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNotificationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationUpsertCacheMut.RLock()
	cache, cached := notificationUpsertCache[key]
	notificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationAllColumns,
			notificationColumnsWithDefault,
			notificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			notificationAllColumns,
			notificationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert notifications, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`notifications`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notifications` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationType, notificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for notifications")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(notificationType, notificationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for notifications")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notifications")
	}

CacheNoHooks:
	if !cached {
		notificationUpsertCacheMut.Lock()
		notificationUpsertCache[key] = cache
		notificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Notification record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Notification) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Notification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Notification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Notification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationPrimaryKeyMapping)
	sql := "DELETE FROM `notifications` WHERE `notification_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notifications")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q notificationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q notificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no notificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notifications")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o NotificationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notifications` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notifications")
	}

	if len(notificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Notification) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Notification provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Notification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotification(ctx, exec, o.NotificationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty NotificationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notifications`.* FROM `notifications` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, notificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotificationSlice")
	}

	*o = slice

	return nil
}

// NotificationExistsG checks if the Notification row exists.
func NotificationExistsG(ctx context.Context, notificationID int) (bool, error) {
	return NotificationExists(ctx, boil.GetContextDB(), notificationID)
}

// NotificationExists checks if the Notification row exists.
func NotificationExists(ctx context.Context, exec boil.ContextExecutor, notificationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notifications` where `notification_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, notificationID)
	}
	row := exec.QueryRowContext(ctx, sql, notificationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notifications exists")
	}

	return exists, nil
}

// Exists checks if the Notification row exists.
func (o *Notification) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NotificationExists(ctx, exec, o.NotificationID)
}
