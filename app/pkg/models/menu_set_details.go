// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MenuSetDetail is an object representing the database table.
type MenuSetDetail struct {
	SetID         int       `boil:"set_id" json:"set_id" toml:"set_id" yaml:"set_id"`
	StoreID       int       `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	MenuID        int       `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedBy     null.Int  `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	CreatedByType string    `boil:"created_by_type" json:"created_by_type" toml:"created_by_type" yaml:"created_by_type"`
	UpdatedBy     null.Int  `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	UpdatedByType string    `boil:"updated_by_type" json:"updated_by_type" toml:"updated_by_type" yaml:"updated_by_type"`

	R *menuSetDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuSetDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuSetDetailColumns = struct {
	SetID         string
	StoreID       string
	MenuID        string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	CreatedByType string
	UpdatedBy     string
	UpdatedByType string
}{
	SetID:         "set_id",
	StoreID:       "store_id",
	MenuID:        "menu_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	CreatedBy:     "created_by",
	CreatedByType: "created_by_type",
	UpdatedBy:     "updated_by",
	UpdatedByType: "updated_by_type",
}

var MenuSetDetailTableColumns = struct {
	SetID         string
	StoreID       string
	MenuID        string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	CreatedByType string
	UpdatedBy     string
	UpdatedByType string
}{
	SetID:         "menu_set_details.set_id",
	StoreID:       "menu_set_details.store_id",
	MenuID:        "menu_set_details.menu_id",
	CreatedAt:     "menu_set_details.created_at",
	UpdatedAt:     "menu_set_details.updated_at",
	CreatedBy:     "menu_set_details.created_by",
	CreatedByType: "menu_set_details.created_by_type",
	UpdatedBy:     "menu_set_details.updated_by",
	UpdatedByType: "menu_set_details.updated_by_type",
}

// Generated where

var MenuSetDetailWhere = struct {
	SetID         whereHelperint
	StoreID       whereHelperint
	MenuID        whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	CreatedBy     whereHelpernull_Int
	CreatedByType whereHelperstring
	UpdatedBy     whereHelpernull_Int
	UpdatedByType whereHelperstring
}{
	SetID:         whereHelperint{field: "`menu_set_details`.`set_id`"},
	StoreID:       whereHelperint{field: "`menu_set_details`.`store_id`"},
	MenuID:        whereHelperint{field: "`menu_set_details`.`menu_id`"},
	CreatedAt:     whereHelpertime_Time{field: "`menu_set_details`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`menu_set_details`.`updated_at`"},
	CreatedBy:     whereHelpernull_Int{field: "`menu_set_details`.`created_by`"},
	CreatedByType: whereHelperstring{field: "`menu_set_details`.`created_by_type`"},
	UpdatedBy:     whereHelpernull_Int{field: "`menu_set_details`.`updated_by`"},
	UpdatedByType: whereHelperstring{field: "`menu_set_details`.`updated_by_type`"},
}

// MenuSetDetailRels is where relationship names are stored.
var MenuSetDetailRels = struct {
	Set   string
	Store string
}{
	Set:   "Set",
	Store: "Store",
}

// menuSetDetailR is where relationships are stored.
type menuSetDetailR struct {
	Set   *MenuSet `boil:"Set" json:"Set" toml:"Set" yaml:"Set"`
	Store *Store   `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
}

// NewStruct creates a new relationship struct
func (*menuSetDetailR) NewStruct() *menuSetDetailR {
	return &menuSetDetailR{}
}

func (r *menuSetDetailR) GetSet() *MenuSet {
	if r == nil {
		return nil
	}
	return r.Set
}

func (r *menuSetDetailR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

// menuSetDetailL is where Load methods for each relationship are stored.
type menuSetDetailL struct{}

var (
	menuSetDetailAllColumns            = []string{"set_id", "store_id", "menu_id", "created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	menuSetDetailColumnsWithoutDefault = []string{"set_id", "store_id", "menu_id"}
	menuSetDetailColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	menuSetDetailPrimaryKeyColumns     = []string{"set_id", "store_id", "menu_id"}
	menuSetDetailGeneratedColumns      = []string{}
)

type (
	// MenuSetDetailSlice is an alias for a slice of pointers to MenuSetDetail.
	// This should almost always be used instead of []MenuSetDetail.
	MenuSetDetailSlice []*MenuSetDetail
	// MenuSetDetailHook is the signature for custom MenuSetDetail hook methods
	MenuSetDetailHook func(context.Context, boil.ContextExecutor, *MenuSetDetail) error

	menuSetDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuSetDetailType                 = reflect.TypeOf(&MenuSetDetail{})
	menuSetDetailMapping              = queries.MakeStructMapping(menuSetDetailType)
	menuSetDetailPrimaryKeyMapping, _ = queries.BindMapping(menuSetDetailType, menuSetDetailMapping, menuSetDetailPrimaryKeyColumns)
	menuSetDetailInsertCacheMut       sync.RWMutex
	menuSetDetailInsertCache          = make(map[string]insertCache)
	menuSetDetailUpdateCacheMut       sync.RWMutex
	menuSetDetailUpdateCache          = make(map[string]updateCache)
	menuSetDetailUpsertCacheMut       sync.RWMutex
	menuSetDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var menuSetDetailAfterSelectHooks []MenuSetDetailHook

var menuSetDetailBeforeInsertHooks []MenuSetDetailHook
var menuSetDetailAfterInsertHooks []MenuSetDetailHook

var menuSetDetailBeforeUpdateHooks []MenuSetDetailHook
var menuSetDetailAfterUpdateHooks []MenuSetDetailHook

var menuSetDetailBeforeDeleteHooks []MenuSetDetailHook
var menuSetDetailAfterDeleteHooks []MenuSetDetailHook

var menuSetDetailBeforeUpsertHooks []MenuSetDetailHook
var menuSetDetailAfterUpsertHooks []MenuSetDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MenuSetDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MenuSetDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MenuSetDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MenuSetDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MenuSetDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MenuSetDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MenuSetDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MenuSetDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MenuSetDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuSetDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMenuSetDetailHook registers your hook function for all future operations.
func AddMenuSetDetailHook(hookPoint boil.HookPoint, menuSetDetailHook MenuSetDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		menuSetDetailAfterSelectHooks = append(menuSetDetailAfterSelectHooks, menuSetDetailHook)
	case boil.BeforeInsertHook:
		menuSetDetailBeforeInsertHooks = append(menuSetDetailBeforeInsertHooks, menuSetDetailHook)
	case boil.AfterInsertHook:
		menuSetDetailAfterInsertHooks = append(menuSetDetailAfterInsertHooks, menuSetDetailHook)
	case boil.BeforeUpdateHook:
		menuSetDetailBeforeUpdateHooks = append(menuSetDetailBeforeUpdateHooks, menuSetDetailHook)
	case boil.AfterUpdateHook:
		menuSetDetailAfterUpdateHooks = append(menuSetDetailAfterUpdateHooks, menuSetDetailHook)
	case boil.BeforeDeleteHook:
		menuSetDetailBeforeDeleteHooks = append(menuSetDetailBeforeDeleteHooks, menuSetDetailHook)
	case boil.AfterDeleteHook:
		menuSetDetailAfterDeleteHooks = append(menuSetDetailAfterDeleteHooks, menuSetDetailHook)
	case boil.BeforeUpsertHook:
		menuSetDetailBeforeUpsertHooks = append(menuSetDetailBeforeUpsertHooks, menuSetDetailHook)
	case boil.AfterUpsertHook:
		menuSetDetailAfterUpsertHooks = append(menuSetDetailAfterUpsertHooks, menuSetDetailHook)
	}
}

// OneG returns a single menuSetDetail record from the query using the global executor.
func (q menuSetDetailQuery) OneG(ctx context.Context) (*MenuSetDetail, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single menuSetDetail record from the query.
func (q menuSetDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MenuSetDetail, error) {
	o := &MenuSetDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for menu_set_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MenuSetDetail records from the query using the global executor.
func (q menuSetDetailQuery) AllG(ctx context.Context) (MenuSetDetailSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MenuSetDetail records from the query.
func (q menuSetDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuSetDetailSlice, error) {
	var o []*MenuSetDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MenuSetDetail slice")
	}

	if len(menuSetDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MenuSetDetail records in the query using the global executor
func (q menuSetDetailQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MenuSetDetail records in the query.
func (q menuSetDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count menu_set_details rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q menuSetDetailQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q menuSetDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if menu_set_details exists")
	}

	return count > 0, nil
}

// Set pointed to by the foreign key.
func (o *MenuSetDetail) Set(mods ...qm.QueryMod) menuSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`set_id` = ?", o.SetID),
	}

	queryMods = append(queryMods, mods...)

	return MenuSets(queryMods...)
}

// Store pointed to by the foreign key.
func (o *MenuSetDetail) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`store_id` = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// LoadSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuSetDetailL) LoadSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuSetDetail interface{}, mods queries.Applicator) error {
	var slice []*MenuSetDetail
	var object *MenuSetDetail

	if singular {
		var ok bool
		object, ok = maybeMenuSetDetail.(*MenuSetDetail)
		if !ok {
			object = new(MenuSetDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuSetDetail))
			}
		}
	} else {
		s, ok := maybeMenuSetDetail.(*[]*MenuSetDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuSetDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuSetDetailR{}
		}
		args = append(args, object.SetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuSetDetailR{}
			}

			for _, a := range args {
				if a == obj.SetID {
					continue Outer
				}
			}

			args = append(args, obj.SetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_sets`),
		qm.WhereIn(`menu_sets.set_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MenuSet")
	}

	var resultSlice []*MenuSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MenuSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menu_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_sets")
	}

	if len(menuSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Set = foreign
		if foreign.R == nil {
			foreign.R = &menuSetR{}
		}
		foreign.R.SetMenuSetDetails = append(foreign.R.SetMenuSetDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SetID == foreign.SetID {
				local.R.Set = foreign
				if foreign.R == nil {
					foreign.R = &menuSetR{}
				}
				foreign.R.SetMenuSetDetails = append(foreign.R.SetMenuSetDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuSetDetailL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuSetDetail interface{}, mods queries.Applicator) error {
	var slice []*MenuSetDetail
	var object *MenuSetDetail

	if singular {
		var ok bool
		object, ok = maybeMenuSetDetail.(*MenuSetDetail)
		if !ok {
			object = new(MenuSetDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuSetDetail))
			}
		}
	} else {
		s, ok := maybeMenuSetDetail.(*[]*MenuSetDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuSetDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuSetDetail))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuSetDetailR{}
		}
		args = append(args, object.StoreID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuSetDetailR{}
			}

			for _, a := range args {
				if a == obj.StoreID {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stores`),
		qm.WhereIn(`stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.MenuSetDetails = append(foreign.R.MenuSetDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.StoreID {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.MenuSetDetails = append(foreign.R.MenuSetDetails, local)
				break
			}
		}
	}

	return nil
}

// SetSetG of the menuSetDetail to the related item.
// Sets o.R.Set to related.
// Adds o to related.R.SetMenuSetDetails.
// Uses the global database handle.
func (o *MenuSetDetail) SetSetG(ctx context.Context, insert bool, related *MenuSet) error {
	return o.SetSet(ctx, boil.GetContextDB(), insert, related)
}

// SetSet of the menuSetDetail to the related item.
// Sets o.R.Set to related.
// Adds o to related.R.SetMenuSetDetails.
func (o *MenuSetDetail) SetSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MenuSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `menu_set_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"set_id"}),
		strmangle.WhereClause("`", "`", 0, menuSetDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.SetID, o.SetID, o.StoreID, o.MenuID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SetID = related.SetID
	if o.R == nil {
		o.R = &menuSetDetailR{
			Set: related,
		}
	} else {
		o.R.Set = related
	}

	if related.R == nil {
		related.R = &menuSetR{
			SetMenuSetDetails: MenuSetDetailSlice{o},
		}
	} else {
		related.R.SetMenuSetDetails = append(related.R.SetMenuSetDetails, o)
	}

	return nil
}

// SetStoreG of the menuSetDetail to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.MenuSetDetails.
// Uses the global database handle.
func (o *MenuSetDetail) SetStoreG(ctx context.Context, insert bool, related *Store) error {
	return o.SetStore(ctx, boil.GetContextDB(), insert, related)
}

// SetStore of the menuSetDetail to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.MenuSetDetails.
func (o *MenuSetDetail) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `menu_set_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, menuSetDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.SetID, o.StoreID, o.MenuID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.StoreID
	if o.R == nil {
		o.R = &menuSetDetailR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			MenuSetDetails: MenuSetDetailSlice{o},
		}
	} else {
		related.R.MenuSetDetails = append(related.R.MenuSetDetails, o)
	}

	return nil
}

// MenuSetDetails retrieves all the records using an executor.
func MenuSetDetails(mods ...qm.QueryMod) menuSetDetailQuery {
	mods = append(mods, qm.From("`menu_set_details`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`menu_set_details`.*"})
	}

	return menuSetDetailQuery{q}
}

// FindMenuSetDetailG retrieves a single record by ID.
func FindMenuSetDetailG(ctx context.Context, setID int, storeID int, menuID int, selectCols ...string) (*MenuSetDetail, error) {
	return FindMenuSetDetail(ctx, boil.GetContextDB(), setID, storeID, menuID, selectCols...)
}

// FindMenuSetDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuSetDetail(ctx context.Context, exec boil.ContextExecutor, setID int, storeID int, menuID int, selectCols ...string) (*MenuSetDetail, error) {
	menuSetDetailObj := &MenuSetDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `menu_set_details` where `set_id`=? AND `store_id`=? AND `menu_id`=?", sel,
	)

	q := queries.Raw(query, setID, storeID, menuID)

	err := q.Bind(ctx, exec, menuSetDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from menu_set_details")
	}

	if err = menuSetDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return menuSetDetailObj, err
	}

	return menuSetDetailObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MenuSetDetail) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuSetDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_set_details provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuSetDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuSetDetailInsertCacheMut.RLock()
	cache, cached := menuSetDetailInsertCache[key]
	menuSetDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuSetDetailAllColumns,
			menuSetDetailColumnsWithDefault,
			menuSetDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuSetDetailType, menuSetDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuSetDetailType, menuSetDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `menu_set_details` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `menu_set_details` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `menu_set_details` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, menuSetDetailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into menu_set_details")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SetID,
		o.StoreID,
		o.MenuID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for menu_set_details")
	}

CacheNoHooks:
	if !cached {
		menuSetDetailInsertCacheMut.Lock()
		menuSetDetailInsertCache[key] = cache
		menuSetDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MenuSetDetail record using the global executor.
// See Update for more documentation.
func (o *MenuSetDetail) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MenuSetDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuSetDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	menuSetDetailUpdateCacheMut.RLock()
	cache, cached := menuSetDetailUpdateCache[key]
	menuSetDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuSetDetailAllColumns,
			menuSetDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update menu_set_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `menu_set_details` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, menuSetDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuSetDetailType, menuSetDetailMapping, append(wl, menuSetDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update menu_set_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for menu_set_details")
	}

	if !cached {
		menuSetDetailUpdateCacheMut.Lock()
		menuSetDetailUpdateCache[key] = cache
		menuSetDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q menuSetDetailQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q menuSetDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for menu_set_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for menu_set_details")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MenuSetDetailSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuSetDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuSetDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `menu_set_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuSetDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in menuSetDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all menuSetDetail")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MenuSetDetail) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMenuSetDetailUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuSetDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_set_details provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuSetDetailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMenuSetDetailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuSetDetailUpsertCacheMut.RLock()
	cache, cached := menuSetDetailUpsertCache[key]
	menuSetDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			menuSetDetailAllColumns,
			menuSetDetailColumnsWithDefault,
			menuSetDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuSetDetailAllColumns,
			menuSetDetailPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert menu_set_details, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`menu_set_details`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `menu_set_details` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(menuSetDetailType, menuSetDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuSetDetailType, menuSetDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for menu_set_details")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(menuSetDetailType, menuSetDetailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for menu_set_details")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for menu_set_details")
	}

CacheNoHooks:
	if !cached {
		menuSetDetailUpsertCacheMut.Lock()
		menuSetDetailUpsertCache[key] = cache
		menuSetDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MenuSetDetail record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MenuSetDetail) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MenuSetDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuSetDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MenuSetDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuSetDetailPrimaryKeyMapping)
	sql := "DELETE FROM `menu_set_details` WHERE `set_id`=? AND `store_id`=? AND `menu_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from menu_set_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for menu_set_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q menuSetDetailQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q menuSetDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no menuSetDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menu_set_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_set_details")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MenuSetDetailSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuSetDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(menuSetDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuSetDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `menu_set_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuSetDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menuSetDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_set_details")
	}

	if len(menuSetDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MenuSetDetail) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MenuSetDetail provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuSetDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenuSetDetail(ctx, exec, o.SetID, o.StoreID, o.MenuID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSetDetailSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MenuSetDetailSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSetDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuSetDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuSetDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `menu_set_details`.* FROM `menu_set_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuSetDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MenuSetDetailSlice")
	}

	*o = slice

	return nil
}

// MenuSetDetailExistsG checks if the MenuSetDetail row exists.
func MenuSetDetailExistsG(ctx context.Context, setID int, storeID int, menuID int) (bool, error) {
	return MenuSetDetailExists(ctx, boil.GetContextDB(), setID, storeID, menuID)
}

// MenuSetDetailExists checks if the MenuSetDetail row exists.
func MenuSetDetailExists(ctx context.Context, exec boil.ContextExecutor, setID int, storeID int, menuID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `menu_set_details` where `set_id`=? AND `store_id`=? AND `menu_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, setID, storeID, menuID)
	}
	row := exec.QueryRowContext(ctx, sql, setID, storeID, menuID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if menu_set_details exists")
	}

	return exists, nil
}

// Exists checks if the MenuSetDetail row exists.
func (o *MenuSetDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuSetDetailExists(ctx, exec, o.SetID, o.StoreID, o.MenuID)
}
