// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Menu is an object representing the database table.
type Menu struct {
	MenuID   int               `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`
	StoreID  null.Int          `boil:"store_id" json:"store_id,omitempty" toml:"store_id" yaml:"store_id,omitempty"`
	MenuName null.String       `boil:"menu_name" json:"menu_name,omitempty" toml:"menu_name" yaml:"menu_name,omitempty"`
	Price    types.NullDecimal `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Time     null.Int          `boil:"time" json:"time,omitempty" toml:"time" yaml:"time,omitempty"`

	R *menuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuColumns = struct {
	MenuID   string
	StoreID  string
	MenuName string
	Price    string
	Time     string
}{
	MenuID:   "menu_id",
	StoreID:  "store_id",
	MenuName: "menu_name",
	Price:    "price",
	Time:     "time",
}

var MenuTableColumns = struct {
	MenuID   string
	StoreID  string
	MenuName string
	Price    string
	Time     string
}{
	MenuID:   "menus.menu_id",
	StoreID:  "menus.store_id",
	MenuName: "menus.menu_name",
	Price:    "menus.price",
	Time:     "menus.time",
}

// Generated where

var MenuWhere = struct {
	MenuID   whereHelperint
	StoreID  whereHelpernull_Int
	MenuName whereHelpernull_String
	Price    whereHelpertypes_NullDecimal
	Time     whereHelpernull_Int
}{
	MenuID:   whereHelperint{field: "`menus`.`menu_id`"},
	StoreID:  whereHelpernull_Int{field: "`menus`.`store_id`"},
	MenuName: whereHelpernull_String{field: "`menus`.`menu_name`"},
	Price:    whereHelpertypes_NullDecimal{field: "`menus`.`price`"},
	Time:     whereHelpernull_Int{field: "`menus`.`time`"},
}

// MenuRels is where relationship names are stored.
var MenuRels = struct {
	Store       string
	SetMenuSets string
}{
	Store:       "Store",
	SetMenuSets: "SetMenuSets",
}

// menuR is where relationships are stored.
type menuR struct {
	Store       *Store       `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
	SetMenuSets MenuSetSlice `boil:"SetMenuSets" json:"SetMenuSets" toml:"SetMenuSets" yaml:"SetMenuSets"`
}

// NewStruct creates a new relationship struct
func (*menuR) NewStruct() *menuR {
	return &menuR{}
}

func (r *menuR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

func (r *menuR) GetSetMenuSets() MenuSetSlice {
	if r == nil {
		return nil
	}
	return r.SetMenuSets
}

// menuL is where Load methods for each relationship are stored.
type menuL struct{}

var (
	menuAllColumns            = []string{"menu_id", "store_id", "menu_name", "price", "time"}
	menuColumnsWithoutDefault = []string{"menu_id", "store_id", "menu_name", "price", "time"}
	menuColumnsWithDefault    = []string{}
	menuPrimaryKeyColumns     = []string{"menu_id"}
	menuGeneratedColumns      = []string{}
)

type (
	// MenuSlice is an alias for a slice of pointers to Menu.
	// This should almost always be used instead of []Menu.
	MenuSlice []*Menu
	// MenuHook is the signature for custom Menu hook methods
	MenuHook func(context.Context, boil.ContextExecutor, *Menu) error

	menuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuType                 = reflect.TypeOf(&Menu{})
	menuMapping              = queries.MakeStructMapping(menuType)
	menuPrimaryKeyMapping, _ = queries.BindMapping(menuType, menuMapping, menuPrimaryKeyColumns)
	menuInsertCacheMut       sync.RWMutex
	menuInsertCache          = make(map[string]insertCache)
	menuUpdateCacheMut       sync.RWMutex
	menuUpdateCache          = make(map[string]updateCache)
	menuUpsertCacheMut       sync.RWMutex
	menuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var menuAfterSelectHooks []MenuHook

var menuBeforeInsertHooks []MenuHook
var menuAfterInsertHooks []MenuHook

var menuBeforeUpdateHooks []MenuHook
var menuAfterUpdateHooks []MenuHook

var menuBeforeDeleteHooks []MenuHook
var menuAfterDeleteHooks []MenuHook

var menuBeforeUpsertHooks []MenuHook
var menuAfterUpsertHooks []MenuHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Menu) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Menu) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Menu) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Menu) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Menu) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Menu) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Menu) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Menu) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Menu) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMenuHook registers your hook function for all future operations.
func AddMenuHook(hookPoint boil.HookPoint, menuHook MenuHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		menuAfterSelectHooks = append(menuAfterSelectHooks, menuHook)
	case boil.BeforeInsertHook:
		menuBeforeInsertHooks = append(menuBeforeInsertHooks, menuHook)
	case boil.AfterInsertHook:
		menuAfterInsertHooks = append(menuAfterInsertHooks, menuHook)
	case boil.BeforeUpdateHook:
		menuBeforeUpdateHooks = append(menuBeforeUpdateHooks, menuHook)
	case boil.AfterUpdateHook:
		menuAfterUpdateHooks = append(menuAfterUpdateHooks, menuHook)
	case boil.BeforeDeleteHook:
		menuBeforeDeleteHooks = append(menuBeforeDeleteHooks, menuHook)
	case boil.AfterDeleteHook:
		menuAfterDeleteHooks = append(menuAfterDeleteHooks, menuHook)
	case boil.BeforeUpsertHook:
		menuBeforeUpsertHooks = append(menuBeforeUpsertHooks, menuHook)
	case boil.AfterUpsertHook:
		menuAfterUpsertHooks = append(menuAfterUpsertHooks, menuHook)
	}
}

// OneG returns a single menu record from the query using the global executor.
func (q menuQuery) OneG(ctx context.Context) (*Menu, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single menu record from the query.
func (q menuQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Menu, error) {
	o := &Menu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for menus")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Menu records from the query using the global executor.
func (q menuQuery) AllG(ctx context.Context) (MenuSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Menu records from the query.
func (q menuQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuSlice, error) {
	var o []*Menu

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Menu slice")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Menu records in the query using the global executor
func (q menuQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Menu records in the query.
func (q menuQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count menus rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q menuQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q menuQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if menus exists")
	}

	return count > 0, nil
}

// Store pointed to by the foreign key.
func (o *Menu) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`store_id` = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// SetMenuSets retrieves all the menu_set's MenuSets with an executor via set_id column.
func (o *Menu) SetMenuSets(mods ...qm.QueryMod) menuSetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`menu_set_details` on `menu_sets`.`set_id` = `menu_set_details`.`set_id`"),
		qm.Where("`menu_set_details`.`menu_id`=?", o.MenuID),
	)

	return MenuSets(queryMods...)
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenu interface{}, mods queries.Applicator) error {
	var slice []*Menu
	var object *Menu

	if singular {
		var ok bool
		object, ok = maybeMenu.(*Menu)
		if !ok {
			object = new(Menu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenu))
			}
		}
	} else {
		s, ok := maybeMenu.(*[]*Menu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenu))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuR{}
		}
		if !queries.IsNil(object.StoreID) {
			args = append(args, object.StoreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StoreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StoreID) {
				args = append(args, obj.StoreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stores`),
		qm.WhereIn(`stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.Menus = append(foreign.R.Menus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.Menus = append(foreign.R.Menus, local)
				break
			}
		}
	}

	return nil
}

// LoadSetMenuSets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuL) LoadSetMenuSets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenu interface{}, mods queries.Applicator) error {
	var slice []*Menu
	var object *Menu

	if singular {
		var ok bool
		object, ok = maybeMenu.(*Menu)
		if !ok {
			object = new(Menu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenu))
			}
		}
	} else {
		s, ok := maybeMenu.(*[]*Menu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenu))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuR{}
		}
		args = append(args, object.MenuID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuR{}
			}

			for _, a := range args {
				if a == obj.MenuID {
					continue Outer
				}
			}

			args = append(args, obj.MenuID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`menu_sets`.`set_id`, `menu_sets`.`set_name`, `menu_sets`.`set_price`, `a`.`menu_id`"),
		qm.From("`menu_sets`"),
		qm.InnerJoin("`menu_set_details` as `a` on `menu_sets`.`set_id` = `a`.`set_id`"),
		qm.WhereIn("`a`.`menu_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_sets")
	}

	var resultSlice []*MenuSet

	var localJoinCols []int
	for results.Next() {
		one := new(MenuSet)
		var localJoinCol int

		err = results.Scan(&one.SetID, &one.SetName, &one.SetPrice, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for menu_sets")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice menu_sets")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_sets")
	}

	if len(menuSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SetMenuSets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuSetR{}
			}
			foreign.R.Menus = append(foreign.R.Menus, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.MenuID == localJoinCol {
				local.R.SetMenuSets = append(local.R.SetMenuSets, foreign)
				if foreign.R == nil {
					foreign.R = &menuSetR{}
				}
				foreign.R.Menus = append(foreign.R.Menus, local)
				break
			}
		}
	}

	return nil
}

// SetStoreG of the menu to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Menus.
// Uses the global database handle.
func (o *Menu) SetStoreG(ctx context.Context, insert bool, related *Store) error {
	return o.SetStore(ctx, boil.GetContextDB(), insert, related)
}

// SetStore of the menu to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Menus.
func (o *Menu) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `menus` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, menuPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.MenuID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StoreID, related.StoreID)
	if o.R == nil {
		o.R = &menuR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			Menus: MenuSlice{o},
		}
	} else {
		related.R.Menus = append(related.R.Menus, o)
	}

	return nil
}

// RemoveStoreG relationship.
// Sets o.R.Store to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Menu) RemoveStoreG(ctx context.Context, related *Store) error {
	return o.RemoveStore(ctx, boil.GetContextDB(), related)
}

// RemoveStore relationship.
// Sets o.R.Store to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Menu) RemoveStore(ctx context.Context, exec boil.ContextExecutor, related *Store) error {
	var err error

	queries.SetScanner(&o.StoreID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("store_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Store = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Menus {
		if queries.Equal(o.StoreID, ri.StoreID) {
			continue
		}

		ln := len(related.R.Menus)
		if ln > 1 && i < ln-1 {
			related.R.Menus[i] = related.R.Menus[ln-1]
		}
		related.R.Menus = related.R.Menus[:ln-1]
		break
	}
	return nil
}

// AddSetMenuSetsG adds the given related objects to the existing relationships
// of the menu, optionally inserting them as new records.
// Appends related to o.R.SetMenuSets.
// Sets related.R.Menus appropriately.
// Uses the global database handle.
func (o *Menu) AddSetMenuSetsG(ctx context.Context, insert bool, related ...*MenuSet) error {
	return o.AddSetMenuSets(ctx, boil.GetContextDB(), insert, related...)
}

// AddSetMenuSets adds the given related objects to the existing relationships
// of the menu, optionally inserting them as new records.
// Appends related to o.R.SetMenuSets.
// Sets related.R.Menus appropriately.
func (o *Menu) AddSetMenuSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuSet) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `menu_set_details` (`menu_id`, `set_id`) values (?, ?)"
		values := []interface{}{o.MenuID, rel.SetID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &menuR{
			SetMenuSets: related,
		}
	} else {
		o.R.SetMenuSets = append(o.R.SetMenuSets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuSetR{
				Menus: MenuSlice{o},
			}
		} else {
			rel.R.Menus = append(rel.R.Menus, o)
		}
	}
	return nil
}

// SetSetMenuSetsG removes all previously related items of the
// menu replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Menus's SetMenuSets accordingly.
// Replaces o.R.SetMenuSets with related.
// Sets related.R.Menus's SetMenuSets accordingly.
// Uses the global database handle.
func (o *Menu) SetSetMenuSetsG(ctx context.Context, insert bool, related ...*MenuSet) error {
	return o.SetSetMenuSets(ctx, boil.GetContextDB(), insert, related...)
}

// SetSetMenuSets removes all previously related items of the
// menu replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Menus's SetMenuSets accordingly.
// Replaces o.R.SetMenuSets with related.
// Sets related.R.Menus's SetMenuSets accordingly.
func (o *Menu) SetSetMenuSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuSet) error {
	query := "delete from `menu_set_details` where `menu_id` = ?"
	values := []interface{}{o.MenuID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSetMenuSetsFromMenusSlice(o, related)
	if o.R != nil {
		o.R.SetMenuSets = nil
	}

	return o.AddSetMenuSets(ctx, exec, insert, related...)
}

// RemoveSetMenuSetsG relationships from objects passed in.
// Removes related items from R.SetMenuSets (uses pointer comparison, removal does not keep order)
// Sets related.R.Menus.
// Uses the global database handle.
func (o *Menu) RemoveSetMenuSetsG(ctx context.Context, related ...*MenuSet) error {
	return o.RemoveSetMenuSets(ctx, boil.GetContextDB(), related...)
}

// RemoveSetMenuSets relationships from objects passed in.
// Removes related items from R.SetMenuSets (uses pointer comparison, removal does not keep order)
// Sets related.R.Menus.
func (o *Menu) RemoveSetMenuSets(ctx context.Context, exec boil.ContextExecutor, related ...*MenuSet) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `menu_set_details` where `menu_id` = ? and `set_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.MenuID}
	for _, rel := range related {
		values = append(values, rel.SetID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSetMenuSetsFromMenusSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SetMenuSets {
			if rel != ri {
				continue
			}

			ln := len(o.R.SetMenuSets)
			if ln > 1 && i < ln-1 {
				o.R.SetMenuSets[i] = o.R.SetMenuSets[ln-1]
			}
			o.R.SetMenuSets = o.R.SetMenuSets[:ln-1]
			break
		}
	}

	return nil
}

func removeSetMenuSetsFromMenusSlice(o *Menu, related []*MenuSet) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Menus {
			if o.MenuID != ri.MenuID {
				continue
			}

			ln := len(rel.R.Menus)
			if ln > 1 && i < ln-1 {
				rel.R.Menus[i] = rel.R.Menus[ln-1]
			}
			rel.R.Menus = rel.R.Menus[:ln-1]
			break
		}
	}
}

// Menus retrieves all the records using an executor.
func Menus(mods ...qm.QueryMod) menuQuery {
	mods = append(mods, qm.From("`menus`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`menus`.*"})
	}

	return menuQuery{q}
}

// FindMenuG retrieves a single record by ID.
func FindMenuG(ctx context.Context, menuID int, selectCols ...string) (*Menu, error) {
	return FindMenu(ctx, boil.GetContextDB(), menuID, selectCols...)
}

// FindMenu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenu(ctx context.Context, exec boil.ContextExecutor, menuID int, selectCols ...string) (*Menu, error) {
	menuObj := &Menu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `menus` where `menu_id`=?", sel,
	)

	q := queries.Raw(query, menuID)

	err := q.Bind(ctx, exec, menuObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from menus")
	}

	if err = menuObj.doAfterSelectHooks(ctx, exec); err != nil {
		return menuObj, err
	}

	return menuObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Menu) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Menu) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menus provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuInsertCacheMut.RLock()
	cache, cached := menuInsertCache[key]
	menuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuAllColumns,
			menuColumnsWithDefault,
			menuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuType, menuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuType, menuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `menus` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `menus` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `menus` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, menuPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into menus")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MenuID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for menus")
	}

CacheNoHooks:
	if !cached {
		menuInsertCacheMut.Lock()
		menuInsertCache[key] = cache
		menuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Menu record using the global executor.
// See Update for more documentation.
func (o *Menu) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Menu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Menu) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	menuUpdateCacheMut.RLock()
	cache, cached := menuUpdateCache[key]
	menuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuAllColumns,
			menuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update menus, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `menus` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, menuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuType, menuMapping, append(wl, menuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update menus row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for menus")
	}

	if !cached {
		menuUpdateCacheMut.Lock()
		menuUpdateCache[key] = cache
		menuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q menuQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q menuQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for menus")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MenuSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `menus` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in menu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all menu")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Menu) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMenuUniqueColumns = []string{
	"menu_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Menu) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menus provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMenuUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuUpsertCacheMut.RLock()
	cache, cached := menuUpsertCache[key]
	menuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			menuAllColumns,
			menuColumnsWithDefault,
			menuColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuAllColumns,
			menuPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert menus, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`menus`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `menus` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(menuType, menuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuType, menuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for menus")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(menuType, menuMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for menus")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for menus")
	}

CacheNoHooks:
	if !cached {
		menuUpsertCacheMut.Lock()
		menuUpsertCache[key] = cache
		menuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Menu record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Menu) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Menu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Menu) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Menu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuPrimaryKeyMapping)
	sql := "DELETE FROM `menus` WHERE `menu_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for menus")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q menuQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q menuQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no menuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menus")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MenuSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(menuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `menus` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menus")
	}

	if len(menuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Menu) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Menu provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Menu) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenu(ctx, exec, o.MenuID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MenuSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `menus`.* FROM `menus` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, menuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MenuSlice")
	}

	*o = slice

	return nil
}

// MenuExistsG checks if the Menu row exists.
func MenuExistsG(ctx context.Context, menuID int) (bool, error) {
	return MenuExists(ctx, boil.GetContextDB(), menuID)
}

// MenuExists checks if the Menu row exists.
func MenuExists(ctx context.Context, exec boil.ContextExecutor, menuID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `menus` where `menu_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, menuID)
	}
	row := exec.QueryRowContext(ctx, sql, menuID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if menus exists")
	}

	return exists, nil
}

// Exists checks if the Menu row exists.
func (o *Menu) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuExists(ctx, exec, o.MenuID)
}
