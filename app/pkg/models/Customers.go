// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Customer is an object representing the database table.
type Customer struct {
	CustomerID    int         `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	CognitoUserID null.String `boil:"cognito_user_id" json:"cognito_user_id,omitempty" toml:"cognito_user_id" yaml:"cognito_user_id,omitempty"`
	Name          null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Email         null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Gender        null.Int    `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	Birthday      null.Time   `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`

	R *customerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerColumns = struct {
	CustomerID    string
	CognitoUserID string
	Name          string
	Email         string
	Gender        string
	Birthday      string
}{
	CustomerID:    "customer_id",
	CognitoUserID: "cognito_user_id",
	Name:          "name",
	Email:         "email",
	Gender:        "gender",
	Birthday:      "birthday",
}

var CustomerTableColumns = struct {
	CustomerID    string
	CognitoUserID string
	Name          string
	Email         string
	Gender        string
	Birthday      string
}{
	CustomerID:    "customers.customer_id",
	CognitoUserID: "customers.cognito_user_id",
	Name:          "customers.name",
	Email:         "customers.email",
	Gender:        "customers.gender",
	Birthday:      "customers.birthday",
}

// Generated where

var CustomerWhere = struct {
	CustomerID    whereHelperint
	CognitoUserID whereHelpernull_String
	Name          whereHelpernull_String
	Email         whereHelpernull_String
	Gender        whereHelpernull_Int
	Birthday      whereHelpernull_Time
}{
	CustomerID:    whereHelperint{field: "`customers`.`customer_id`"},
	CognitoUserID: whereHelpernull_String{field: "`customers`.`cognito_user_id`"},
	Name:          whereHelpernull_String{field: "`customers`.`name`"},
	Email:         whereHelpernull_String{field: "`customers`.`email`"},
	Gender:        whereHelpernull_Int{field: "`customers`.`gender`"},
	Birthday:      whereHelpernull_Time{field: "`customers`.`birthday`"},
}

// CustomerRels is where relationship names are stored.
var CustomerRels = struct {
	Stores        string
	Notifications string
	Reservations  string
}{
	Stores:        "Stores",
	Notifications: "Notifications",
	Reservations:  "Reservations",
}

// customerR is where relationships are stored.
type customerR struct {
	Stores        StoreSlice        `boil:"Stores" json:"Stores" toml:"Stores" yaml:"Stores"`
	Notifications NotificationSlice `boil:"Notifications" json:"Notifications" toml:"Notifications" yaml:"Notifications"`
	Reservations  ReservationSlice  `boil:"Reservations" json:"Reservations" toml:"Reservations" yaml:"Reservations"`
}

// NewStruct creates a new relationship struct
func (*customerR) NewStruct() *customerR {
	return &customerR{}
}

func (r *customerR) GetStores() StoreSlice {
	if r == nil {
		return nil
	}
	return r.Stores
}

func (r *customerR) GetNotifications() NotificationSlice {
	if r == nil {
		return nil
	}
	return r.Notifications
}

func (r *customerR) GetReservations() ReservationSlice {
	if r == nil {
		return nil
	}
	return r.Reservations
}

// customerL is where Load methods for each relationship are stored.
type customerL struct{}

var (
	customerAllColumns            = []string{"customer_id", "cognito_user_id", "name", "email", "gender", "birthday"}
	customerColumnsWithoutDefault = []string{"customer_id", "cognito_user_id", "name", "email", "gender", "birthday"}
	customerColumnsWithDefault    = []string{}
	customerPrimaryKeyColumns     = []string{"customer_id"}
	customerGeneratedColumns      = []string{}
)

type (
	// CustomerSlice is an alias for a slice of pointers to Customer.
	// This should almost always be used instead of []Customer.
	CustomerSlice []*Customer
	// CustomerHook is the signature for custom Customer hook methods
	CustomerHook func(context.Context, boil.ContextExecutor, *Customer) error

	customerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerType                 = reflect.TypeOf(&Customer{})
	customerMapping              = queries.MakeStructMapping(customerType)
	customerPrimaryKeyMapping, _ = queries.BindMapping(customerType, customerMapping, customerPrimaryKeyColumns)
	customerInsertCacheMut       sync.RWMutex
	customerInsertCache          = make(map[string]insertCache)
	customerUpdateCacheMut       sync.RWMutex
	customerUpdateCache          = make(map[string]updateCache)
	customerUpsertCacheMut       sync.RWMutex
	customerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var customerAfterSelectHooks []CustomerHook

var customerBeforeInsertHooks []CustomerHook
var customerAfterInsertHooks []CustomerHook

var customerBeforeUpdateHooks []CustomerHook
var customerAfterUpdateHooks []CustomerHook

var customerBeforeDeleteHooks []CustomerHook
var customerAfterDeleteHooks []CustomerHook

var customerBeforeUpsertHooks []CustomerHook
var customerAfterUpsertHooks []CustomerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Customer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Customer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Customer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Customer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Customer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Customer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Customer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Customer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Customer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerHook registers your hook function for all future operations.
func AddCustomerHook(hookPoint boil.HookPoint, customerHook CustomerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		customerAfterSelectHooks = append(customerAfterSelectHooks, customerHook)
	case boil.BeforeInsertHook:
		customerBeforeInsertHooks = append(customerBeforeInsertHooks, customerHook)
	case boil.AfterInsertHook:
		customerAfterInsertHooks = append(customerAfterInsertHooks, customerHook)
	case boil.BeforeUpdateHook:
		customerBeforeUpdateHooks = append(customerBeforeUpdateHooks, customerHook)
	case boil.AfterUpdateHook:
		customerAfterUpdateHooks = append(customerAfterUpdateHooks, customerHook)
	case boil.BeforeDeleteHook:
		customerBeforeDeleteHooks = append(customerBeforeDeleteHooks, customerHook)
	case boil.AfterDeleteHook:
		customerAfterDeleteHooks = append(customerAfterDeleteHooks, customerHook)
	case boil.BeforeUpsertHook:
		customerBeforeUpsertHooks = append(customerBeforeUpsertHooks, customerHook)
	case boil.AfterUpsertHook:
		customerAfterUpsertHooks = append(customerAfterUpsertHooks, customerHook)
	}
}

// OneG returns a single customer record from the query using the global executor.
func (q customerQuery) OneG(ctx context.Context) (*Customer, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single customer record from the query.
func (q customerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Customer, error) {
	o := &Customer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for customers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Customer records from the query using the global executor.
func (q customerQuery) AllG(ctx context.Context) (CustomerSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Customer records from the query.
func (q customerQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerSlice, error) {
	var o []*Customer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Customer slice")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Customer records in the query using the global executor
func (q customerQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Customer records in the query.
func (q customerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count customers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q customerQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q customerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if customers exists")
	}

	return count > 0, nil
}

// Stores retrieves all the store's Stores with an executor.
func (o *Customer) Stores(mods ...qm.QueryMod) storeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`favorite_stores` on `stores`.`store_id` = `favorite_stores`.`store_id`"),
		qm.Where("`favorite_stores`.`customer_id`=?", o.CustomerID),
	)

	return Stores(queryMods...)
}

// Notifications retrieves all the notification's Notifications with an executor.
func (o *Customer) Notifications(mods ...qm.QueryMod) notificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`notifications`.`customer_id`=?", o.CustomerID),
	)

	return Notifications(queryMods...)
}

// Reservations retrieves all the reservation's Reservations with an executor.
func (o *Customer) Reservations(mods ...qm.QueryMod) reservationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reservations`.`customer_id`=?", o.CustomerID),
	)

	return Reservations(queryMods...)
}

// LoadStores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (customerL) LoadStores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomer interface{}, mods queries.Applicator) error {
	var slice []*Customer
	var object *Customer

	if singular {
		var ok bool
		object, ok = maybeCustomer.(*Customer)
		if !ok {
			object = new(Customer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomer))
			}
		}
	} else {
		s, ok := maybeCustomer.(*[]*Customer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerR{}
		}
		args = append(args, object.CustomerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerR{}
			}

			for _, a := range args {
				if a == obj.CustomerID {
					continue Outer
				}
			}

			args = append(args, obj.CustomerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`stores`.`store_id`, `stores`.`company_id`, `stores`.`store_name`, `stores`.`address`, `stores`.`phone_number`, `stores`.`business_hours`, `a`.`customer_id`"),
		qm.From("`stores`"),
		qm.InnerJoin("`favorite_stores` as `a` on `stores`.`store_id` = `a`.`store_id`"),
		qm.WhereIn("`a`.`customer_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stores")
	}

	var resultSlice []*Store

	var localJoinCols []int
	for results.Next() {
		one := new(Store)
		var localJoinCol int

		err = results.Scan(&one.StoreID, &one.CompanyID, &one.StoreName, &one.Address, &one.PhoneNumber, &one.BusinessHours, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for stores")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice stores")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Stores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeR{}
			}
			foreign.R.Customers = append(foreign.R.Customers, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.CustomerID == localJoinCol {
				local.R.Stores = append(local.R.Stores, foreign)
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.Customers = append(foreign.R.Customers, local)
				break
			}
		}
	}

	return nil
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (customerL) LoadNotifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomer interface{}, mods queries.Applicator) error {
	var slice []*Customer
	var object *Customer

	if singular {
		var ok bool
		object, ok = maybeCustomer.(*Customer)
		if !ok {
			object = new(Customer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomer))
			}
		}
	} else {
		s, ok := maybeCustomer.(*[]*Customer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerR{}
		}
		args = append(args, object.CustomerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CustomerID) {
					continue Outer
				}
			}

			args = append(args, obj.CustomerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notifications`),
		qm.WhereIn(`notifications.customer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notifications")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notifications")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationR{}
			}
			foreign.R.Customer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CustomerID, foreign.CustomerID) {
				local.R.Notifications = append(local.R.Notifications, foreign)
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.Customer = local
				break
			}
		}
	}

	return nil
}

// LoadReservations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (customerL) LoadReservations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomer interface{}, mods queries.Applicator) error {
	var slice []*Customer
	var object *Customer

	if singular {
		var ok bool
		object, ok = maybeCustomer.(*Customer)
		if !ok {
			object = new(Customer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomer))
			}
		}
	} else {
		s, ok := maybeCustomer.(*[]*Customer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerR{}
		}
		args = append(args, object.CustomerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerR{}
			}

			for _, a := range args {
				if a == obj.CustomerID {
					continue Outer
				}
			}

			args = append(args, obj.CustomerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reservations`),
		qm.WhereIn(`reservations.customer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reservations")
	}

	var resultSlice []*Reservation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reservations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reservations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reservations")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reservations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reservationR{}
			}
			foreign.R.Customer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CustomerID == foreign.CustomerID {
				local.R.Reservations = append(local.R.Reservations, foreign)
				if foreign.R == nil {
					foreign.R = &reservationR{}
				}
				foreign.R.Customer = local
				break
			}
		}
	}

	return nil
}

// AddStoresG adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Customers appropriately.
// Uses the global database handle.
func (o *Customer) AddStoresG(ctx context.Context, insert bool, related ...*Store) error {
	return o.AddStores(ctx, boil.GetContextDB(), insert, related...)
}

// AddStores adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Customers appropriately.
func (o *Customer) AddStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Store) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `favorite_stores` (`customer_id`, `store_id`) values (?, ?)"
		values := []interface{}{o.CustomerID, rel.StoreID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &customerR{
			Stores: related,
		}
	} else {
		o.R.Stores = append(o.R.Stores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeR{
				Customers: CustomerSlice{o},
			}
		} else {
			rel.R.Customers = append(rel.R.Customers, o)
		}
	}
	return nil
}

// SetStoresG removes all previously related items of the
// customer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Customers's Stores accordingly.
// Replaces o.R.Stores with related.
// Sets related.R.Customers's Stores accordingly.
// Uses the global database handle.
func (o *Customer) SetStoresG(ctx context.Context, insert bool, related ...*Store) error {
	return o.SetStores(ctx, boil.GetContextDB(), insert, related...)
}

// SetStores removes all previously related items of the
// customer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Customers's Stores accordingly.
// Replaces o.R.Stores with related.
// Sets related.R.Customers's Stores accordingly.
func (o *Customer) SetStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Store) error {
	query := "delete from `favorite_stores` where `customer_id` = ?"
	values := []interface{}{o.CustomerID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStoresFromCustomersSlice(o, related)
	if o.R != nil {
		o.R.Stores = nil
	}

	return o.AddStores(ctx, exec, insert, related...)
}

// RemoveStoresG relationships from objects passed in.
// Removes related items from R.Stores (uses pointer comparison, removal does not keep order)
// Sets related.R.Customers.
// Uses the global database handle.
func (o *Customer) RemoveStoresG(ctx context.Context, related ...*Store) error {
	return o.RemoveStores(ctx, boil.GetContextDB(), related...)
}

// RemoveStores relationships from objects passed in.
// Removes related items from R.Stores (uses pointer comparison, removal does not keep order)
// Sets related.R.Customers.
func (o *Customer) RemoveStores(ctx context.Context, exec boil.ContextExecutor, related ...*Store) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `favorite_stores` where `customer_id` = ? and `store_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.CustomerID}
	for _, rel := range related {
		values = append(values, rel.StoreID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStoresFromCustomersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Stores {
			if rel != ri {
				continue
			}

			ln := len(o.R.Stores)
			if ln > 1 && i < ln-1 {
				o.R.Stores[i] = o.R.Stores[ln-1]
			}
			o.R.Stores = o.R.Stores[:ln-1]
			break
		}
	}

	return nil
}

func removeStoresFromCustomersSlice(o *Customer, related []*Store) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Customers {
			if o.CustomerID != ri.CustomerID {
				continue
			}

			ln := len(rel.R.Customers)
			if ln > 1 && i < ln-1 {
				rel.R.Customers[i] = rel.R.Customers[ln-1]
			}
			rel.R.Customers = rel.R.Customers[:ln-1]
			break
		}
	}
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Customer appropriately.
// Uses the global database handle.
func (o *Customer) AddNotificationsG(ctx context.Context, insert bool, related ...*Notification) error {
	return o.AddNotifications(ctx, boil.GetContextDB(), insert, related...)
}

// AddNotifications adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Customer appropriately.
func (o *Customer) AddNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CustomerID, o.CustomerID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `notifications` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
				strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerID, rel.NotificationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CustomerID, o.CustomerID)
		}
	}

	if o.R == nil {
		o.R = &customerR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Customer: o,
			}
		} else {
			rel.R.Customer = o
		}
	}
	return nil
}

// SetNotificationsG removes all previously related items of the
// customer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Customer's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Customer's Notifications accordingly.
// Uses the global database handle.
func (o *Customer) SetNotificationsG(ctx context.Context, insert bool, related ...*Notification) error {
	return o.SetNotifications(ctx, boil.GetContextDB(), insert, related...)
}

// SetNotifications removes all previously related items of the
// customer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Customer's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Customer's Notifications accordingly.
func (o *Customer) SetNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notification) error {
	query := "update `notifications` set `customer_id` = null where `customer_id` = ?"
	values := []interface{}{o.CustomerID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Notifications {
			queries.SetScanner(&rel.CustomerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Customer = nil
		}
		o.R.Notifications = nil
	}

	return o.AddNotifications(ctx, exec, insert, related...)
}

// RemoveNotificationsG relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Customer.
// Uses the global database handle.
func (o *Customer) RemoveNotificationsG(ctx context.Context, related ...*Notification) error {
	return o.RemoveNotifications(ctx, boil.GetContextDB(), related...)
}

// RemoveNotifications relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Customer.
func (o *Customer) RemoveNotifications(ctx context.Context, exec boil.ContextExecutor, related ...*Notification) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CustomerID, nil)
		if rel.R != nil {
			rel.R.Customer = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("customer_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Notifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.Notifications)
			if ln > 1 && i < ln-1 {
				o.R.Notifications[i] = o.R.Notifications[ln-1]
			}
			o.R.Notifications = o.R.Notifications[:ln-1]
			break
		}
	}

	return nil
}

// AddReservationsG adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Reservations.
// Sets related.R.Customer appropriately.
// Uses the global database handle.
func (o *Customer) AddReservationsG(ctx context.Context, insert bool, related ...*Reservation) error {
	return o.AddReservations(ctx, boil.GetContextDB(), insert, related...)
}

// AddReservations adds the given related objects to the existing relationships
// of the customer, optionally inserting them as new records.
// Appends related to o.R.Reservations.
// Sets related.R.Customer appropriately.
func (o *Customer) AddReservations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reservation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerID = o.CustomerID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reservations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
				strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerID, rel.ReservationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerID = o.CustomerID
		}
	}

	if o.R == nil {
		o.R = &customerR{
			Reservations: related,
		}
	} else {
		o.R.Reservations = append(o.R.Reservations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reservationR{
				Customer: o,
			}
		} else {
			rel.R.Customer = o
		}
	}
	return nil
}

// Customers retrieves all the records using an executor.
func Customers(mods ...qm.QueryMod) customerQuery {
	mods = append(mods, qm.From("`customers`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`customers`.*"})
	}

	return customerQuery{q}
}

// FindCustomerG retrieves a single record by ID.
func FindCustomerG(ctx context.Context, customerID int, selectCols ...string) (*Customer, error) {
	return FindCustomer(ctx, boil.GetContextDB(), customerID, selectCols...)
}

// FindCustomer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomer(ctx context.Context, exec boil.ContextExecutor, customerID int, selectCols ...string) (*Customer, error) {
	customerObj := &Customer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `customers` where `customer_id`=?", sel,
	)

	q := queries.Raw(query, customerID)

	err := q.Bind(ctx, exec, customerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from customers")
	}

	if err = customerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return customerObj, err
	}

	return customerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Customer) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Customer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerInsertCacheMut.RLock()
	cache, cached := customerInsertCache[key]
	customerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerAllColumns,
			customerColumnsWithDefault,
			customerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerType, customerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerType, customerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `customers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `customers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `customers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into customers")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CustomerID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for customers")
	}

CacheNoHooks:
	if !cached {
		customerInsertCacheMut.Lock()
		customerInsertCache[key] = cache
		customerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Customer record using the global executor.
// See Update for more documentation.
func (o *Customer) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Customer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Customer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	customerUpdateCacheMut.RLock()
	cache, cached := customerUpdateCache[key]
	customerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerAllColumns,
			customerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update customers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `customers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, customerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerType, customerMapping, append(wl, customerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update customers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for customers")
	}

	if !cached {
		customerUpdateCacheMut.Lock()
		customerUpdateCache[key] = cache
		customerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q customerQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q customerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for customers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for customers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CustomerSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `customers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in customer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all customer")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Customer) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLCustomerUniqueColumns = []string{
	"customer_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Customer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCustomerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerUpsertCacheMut.RLock()
	cache, cached := customerUpsertCache[key]
	customerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			customerAllColumns,
			customerColumnsWithDefault,
			customerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			customerAllColumns,
			customerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert customers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`customers`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `customers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(customerType, customerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerType, customerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for customers")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(customerType, customerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for customers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for customers")
	}

CacheNoHooks:
	if !cached {
		customerUpsertCacheMut.Lock()
		customerUpsertCache[key] = cache
		customerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Customer record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Customer) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Customer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Customer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Customer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerPrimaryKeyMapping)
	sql := "DELETE FROM `customers` WHERE `customer_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from customers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for customers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q customerQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q customerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no customerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CustomerSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(customerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `customers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customers")
	}

	if len(customerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Customer) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Customer provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Customer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCustomer(ctx, exec, o.CustomerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CustomerSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `customers`.* FROM `customers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CustomerSlice")
	}

	*o = slice

	return nil
}

// CustomerExistsG checks if the Customer row exists.
func CustomerExistsG(ctx context.Context, customerID int) (bool, error) {
	return CustomerExists(ctx, boil.GetContextDB(), customerID)
}

// CustomerExists checks if the Customer row exists.
func CustomerExists(ctx context.Context, exec boil.ContextExecutor, customerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `customers` where `customer_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customerID)
	}
	row := exec.QueryRowContext(ctx, sql, customerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if customers exists")
	}

	return exists, nil
}

// Exists checks if the Customer row exists.
func (o *Customer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CustomerExists(ctx, exec, o.CustomerID)
}
