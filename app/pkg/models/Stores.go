// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Store is an object representing the database table.
type Store struct {
	StoreID       int         `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	CompanyID     null.Int    `boil:"company_id" json:"company_id,omitempty" toml:"company_id" yaml:"company_id,omitempty"`
	StoreName     null.String `boil:"store_name" json:"store_name,omitempty" toml:"store_name" yaml:"store_name,omitempty"`
	Address       null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	PhoneNumber   null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	BusinessHours null.String `boil:"business_hours" json:"business_hours,omitempty" toml:"business_hours" yaml:"business_hours,omitempty"`

	R *storeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreColumns = struct {
	StoreID       string
	CompanyID     string
	StoreName     string
	Address       string
	PhoneNumber   string
	BusinessHours string
}{
	StoreID:       "store_id",
	CompanyID:     "company_id",
	StoreName:     "store_name",
	Address:       "address",
	PhoneNumber:   "phone_number",
	BusinessHours: "business_hours",
}

var StoreTableColumns = struct {
	StoreID       string
	CompanyID     string
	StoreName     string
	Address       string
	PhoneNumber   string
	BusinessHours string
}{
	StoreID:       "stores.store_id",
	CompanyID:     "stores.company_id",
	StoreName:     "stores.store_name",
	Address:       "stores.address",
	PhoneNumber:   "stores.phone_number",
	BusinessHours: "stores.business_hours",
}

// Generated where

var StoreWhere = struct {
	StoreID       whereHelperint
	CompanyID     whereHelpernull_Int
	StoreName     whereHelpernull_String
	Address       whereHelpernull_String
	PhoneNumber   whereHelpernull_String
	BusinessHours whereHelpernull_String
}{
	StoreID:       whereHelperint{field: "`stores`.`store_id`"},
	CompanyID:     whereHelpernull_Int{field: "`stores`.`company_id`"},
	StoreName:     whereHelpernull_String{field: "`stores`.`store_name`"},
	Address:       whereHelpernull_String{field: "`stores`.`address`"},
	PhoneNumber:   whereHelpernull_String{field: "`stores`.`phone_number`"},
	BusinessHours: whereHelpernull_String{field: "`stores`.`business_hours`"},
}

// StoreRels is where relationship names are stored.
var StoreRels = struct {
	Company      string
	ActiveStaffs string
	Customers    string
	Menus        string
	Reservations string
	Staffs       string
}{
	Company:      "Company",
	ActiveStaffs: "ActiveStaffs",
	Customers:    "Customers",
	Menus:        "Menus",
	Reservations: "Reservations",
	Staffs:       "Staffs",
}

// storeR is where relationships are stored.
type storeR struct {
	Company      *Company         `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	ActiveStaffs ActiveStaffSlice `boil:"ActiveStaffs" json:"ActiveStaffs" toml:"ActiveStaffs" yaml:"ActiveStaffs"`
	Customers    CustomerSlice    `boil:"Customers" json:"Customers" toml:"Customers" yaml:"Customers"`
	Menus        MenuSlice        `boil:"Menus" json:"Menus" toml:"Menus" yaml:"Menus"`
	Reservations ReservationSlice `boil:"Reservations" json:"Reservations" toml:"Reservations" yaml:"Reservations"`
	Staffs       StaffSlice       `boil:"Staffs" json:"Staffs" toml:"Staffs" yaml:"Staffs"`
}

// NewStruct creates a new relationship struct
func (*storeR) NewStruct() *storeR {
	return &storeR{}
}

func (r *storeR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *storeR) GetActiveStaffs() ActiveStaffSlice {
	if r == nil {
		return nil
	}
	return r.ActiveStaffs
}

func (r *storeR) GetCustomers() CustomerSlice {
	if r == nil {
		return nil
	}
	return r.Customers
}

func (r *storeR) GetMenus() MenuSlice {
	if r == nil {
		return nil
	}
	return r.Menus
}

func (r *storeR) GetReservations() ReservationSlice {
	if r == nil {
		return nil
	}
	return r.Reservations
}

func (r *storeR) GetStaffs() StaffSlice {
	if r == nil {
		return nil
	}
	return r.Staffs
}

// storeL is where Load methods for each relationship are stored.
type storeL struct{}

var (
	storeAllColumns            = []string{"store_id", "company_id", "store_name", "address", "phone_number", "business_hours"}
	storeColumnsWithoutDefault = []string{"store_id", "company_id", "store_name", "address", "phone_number", "business_hours"}
	storeColumnsWithDefault    = []string{}
	storePrimaryKeyColumns     = []string{"store_id"}
	storeGeneratedColumns      = []string{}
)

type (
	// StoreSlice is an alias for a slice of pointers to Store.
	// This should almost always be used instead of []Store.
	StoreSlice []*Store
	// StoreHook is the signature for custom Store hook methods
	StoreHook func(context.Context, boil.ContextExecutor, *Store) error

	storeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeType                 = reflect.TypeOf(&Store{})
	storeMapping              = queries.MakeStructMapping(storeType)
	storePrimaryKeyMapping, _ = queries.BindMapping(storeType, storeMapping, storePrimaryKeyColumns)
	storeInsertCacheMut       sync.RWMutex
	storeInsertCache          = make(map[string]insertCache)
	storeUpdateCacheMut       sync.RWMutex
	storeUpdateCache          = make(map[string]updateCache)
	storeUpsertCacheMut       sync.RWMutex
	storeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storeAfterSelectHooks []StoreHook

var storeBeforeInsertHooks []StoreHook
var storeAfterInsertHooks []StoreHook

var storeBeforeUpdateHooks []StoreHook
var storeAfterUpdateHooks []StoreHook

var storeBeforeDeleteHooks []StoreHook
var storeAfterDeleteHooks []StoreHook

var storeBeforeUpsertHooks []StoreHook
var storeAfterUpsertHooks []StoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Store) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Store) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Store) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Store) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Store) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Store) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Store) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Store) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Store) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreHook registers your hook function for all future operations.
func AddStoreHook(hookPoint boil.HookPoint, storeHook StoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		storeAfterSelectHooks = append(storeAfterSelectHooks, storeHook)
	case boil.BeforeInsertHook:
		storeBeforeInsertHooks = append(storeBeforeInsertHooks, storeHook)
	case boil.AfterInsertHook:
		storeAfterInsertHooks = append(storeAfterInsertHooks, storeHook)
	case boil.BeforeUpdateHook:
		storeBeforeUpdateHooks = append(storeBeforeUpdateHooks, storeHook)
	case boil.AfterUpdateHook:
		storeAfterUpdateHooks = append(storeAfterUpdateHooks, storeHook)
	case boil.BeforeDeleteHook:
		storeBeforeDeleteHooks = append(storeBeforeDeleteHooks, storeHook)
	case boil.AfterDeleteHook:
		storeAfterDeleteHooks = append(storeAfterDeleteHooks, storeHook)
	case boil.BeforeUpsertHook:
		storeBeforeUpsertHooks = append(storeBeforeUpsertHooks, storeHook)
	case boil.AfterUpsertHook:
		storeAfterUpsertHooks = append(storeAfterUpsertHooks, storeHook)
	}
}

// OneG returns a single store record from the query using the global executor.
func (q storeQuery) OneG(ctx context.Context) (*Store, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single store record from the query.
func (q storeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Store, error) {
	o := &Store{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stores")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Store records from the query using the global executor.
func (q storeQuery) AllG(ctx context.Context) (StoreSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Store records from the query.
func (q storeQuery) All(ctx context.Context, exec boil.ContextExecutor) (StoreSlice, error) {
	var o []*Store

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Store slice")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Store records in the query using the global executor
func (q storeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Store records in the query.
func (q storeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stores rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q storeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q storeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stores exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *Store) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`company_id` = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// ActiveStaffs retrieves all the active_staff's ActiveStaffs with an executor.
func (o *Store) ActiveStaffs(mods ...qm.QueryMod) activeStaffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`active_staff`.`store_id`=?", o.StoreID),
	)

	return ActiveStaffs(queryMods...)
}

// Customers retrieves all the customer's Customers with an executor.
func (o *Store) Customers(mods ...qm.QueryMod) customerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`favorite_stores` on `customers`.`customer_id` = `favorite_stores`.`customer_id`"),
		qm.Where("`favorite_stores`.`store_id`=?", o.StoreID),
	)

	return Customers(queryMods...)
}

// Menus retrieves all the menu's Menus with an executor.
func (o *Store) Menus(mods ...qm.QueryMod) menuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`menus`.`store_id`=?", o.StoreID),
	)

	return Menus(queryMods...)
}

// Reservations retrieves all the reservation's Reservations with an executor.
func (o *Store) Reservations(mods ...qm.QueryMod) reservationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reservations`.`store_id`=?", o.StoreID),
	)

	return Reservations(queryMods...)
}

// Staffs retrieves all the staff's Staffs with an executor.
func (o *Store) Staffs(mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`store_staff` on `staff`.`staff_id` = `store_staff`.`staff_id`"),
		qm.Where("`store_staff`.`store_id`=?", o.StoreID),
	)

	return Staffs(queryMods...)
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storeL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		if !queries.IsNil(object.CompanyID) {
			args = append(args, object.CompanyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CompanyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CompanyID) {
				args = append(args, obj.CompanyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`companies`),
		qm.WhereIn(`companies.company_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.Stores = append(foreign.R.Stores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CompanyID, foreign.CompanyID) {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Stores = append(foreign.R.Stores, local)
				break
			}
		}
	}

	return nil
}

// LoadActiveStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadActiveStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.StoreID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StoreID) {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`active_staff`),
		qm.WhereIn(`active_staff.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load active_staff")
	}

	var resultSlice []*ActiveStaff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice active_staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on active_staff")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for active_staff")
	}

	if len(activeStaffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActiveStaffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &activeStaffR{}
			}
			foreign.R.Store = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.ActiveStaffs = append(local.R.ActiveStaffs, foreign)
				if foreign.R == nil {
					foreign.R = &activeStaffR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// LoadCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadCustomers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.StoreID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if a == obj.StoreID {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`customers`.`customer_id`, `customers`.`cognito_user_id`, `customers`.`name`, `customers`.`email`, `customers`.`gender`, `customers`.`birthday`, `a`.`store_id`"),
		qm.From("`customers`"),
		qm.InnerJoin("`favorite_stores` as `a` on `customers`.`customer_id` = `a`.`customer_id`"),
		qm.WhereIn("`a`.`store_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load customers")
	}

	var resultSlice []*Customer

	var localJoinCols []int
	for results.Next() {
		one := new(Customer)
		var localJoinCol int

		err = results.Scan(&one.CustomerID, &one.CognitoUserID, &one.Name, &one.Email, &one.Gender, &one.Birthday, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for customers")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice customers")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customers")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Customers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customerR{}
			}
			foreign.R.Stores = append(foreign.R.Stores, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.StoreID == localJoinCol {
				local.R.Customers = append(local.R.Customers, foreign)
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.Stores = append(foreign.R.Stores, local)
				break
			}
		}
	}

	return nil
}

// LoadMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadMenus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.StoreID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StoreID) {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menus`),
		qm.WhereIn(`menus.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menus")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Menus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuR{}
			}
			foreign.R.Store = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.Menus = append(local.R.Menus, foreign)
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// LoadReservations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadReservations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.StoreID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if a == obj.StoreID {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reservations`),
		qm.WhereIn(`reservations.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reservations")
	}

	var resultSlice []*Reservation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reservations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reservations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reservations")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reservations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reservationR{}
			}
			foreign.R.Store = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StoreID == foreign.StoreID {
				local.R.Reservations = append(local.R.Reservations, foreign)
				if foreign.R == nil {
					foreign.R = &reservationR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// LoadStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.StoreID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if a == obj.StoreID {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`staff`.`staff_id`, `staff`.`name`, `staff`.`cognito_user_id`, `a`.`store_id`"),
		qm.From("`staff`"),
		qm.InnerJoin("`store_staff` as `a` on `staff`.`staff_id` = `a`.`staff_id`"),
		qm.WhereIn("`a`.`store_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staff")
	}

	var resultSlice []*Staff

	var localJoinCols []int
	for results.Next() {
		one := new(Staff)
		var localJoinCol int

		err = results.Scan(&one.StaffID, &one.Name, &one.CognitoUserID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for staff")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice staff")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staff")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staff")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Staffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffR{}
			}
			foreign.R.Stores = append(foreign.R.Stores, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.StoreID == localJoinCol {
				local.R.Staffs = append(local.R.Staffs, foreign)
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.Stores = append(foreign.R.Stores, local)
				break
			}
		}
	}

	return nil
}

// SetCompanyG of the store to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Stores.
// Uses the global database handle.
func (o *Store) SetCompanyG(ctx context.Context, insert bool, related *Company) error {
	return o.SetCompany(ctx, boil.GetContextDB(), insert, related)
}

// SetCompany of the store to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Stores.
func (o *Store) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `stores` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"company_id"}),
		strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
	)
	values := []interface{}{related.CompanyID, o.StoreID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CompanyID, related.CompanyID)
	if o.R == nil {
		o.R = &storeR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			Stores: StoreSlice{o},
		}
	} else {
		related.R.Stores = append(related.R.Stores, o)
	}

	return nil
}

// RemoveCompanyG relationship.
// Sets o.R.Company to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Store) RemoveCompanyG(ctx context.Context, related *Company) error {
	return o.RemoveCompany(ctx, boil.GetContextDB(), related)
}

// RemoveCompany relationship.
// Sets o.R.Company to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Store) RemoveCompany(ctx context.Context, exec boil.ContextExecutor, related *Company) error {
	var err error

	queries.SetScanner(&o.CompanyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("company_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Company = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Stores {
		if queries.Equal(o.CompanyID, ri.CompanyID) {
			continue
		}

		ln := len(related.R.Stores)
		if ln > 1 && i < ln-1 {
			related.R.Stores[i] = related.R.Stores[ln-1]
		}
		related.R.Stores = related.R.Stores[:ln-1]
		break
	}
	return nil
}

// AddActiveStaffsG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.ActiveStaffs.
// Sets related.R.Store appropriately.
// Uses the global database handle.
func (o *Store) AddActiveStaffsG(ctx context.Context, insert bool, related ...*ActiveStaff) error {
	return o.AddActiveStaffs(ctx, boil.GetContextDB(), insert, related...)
}

// AddActiveStaffs adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.ActiveStaffs.
// Sets related.R.Store appropriately.
func (o *Store) AddActiveStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActiveStaff) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StoreID, o.StoreID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `active_staff` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
				strmangle.WhereClause("`", "`", 0, activeStaffPrimaryKeyColumns),
			)
			values := []interface{}{o.StoreID, rel.StaffID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StoreID, o.StoreID)
		}
	}

	if o.R == nil {
		o.R = &storeR{
			ActiveStaffs: related,
		}
	} else {
		o.R.ActiveStaffs = append(o.R.ActiveStaffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &activeStaffR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// SetActiveStaffsG removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Store's ActiveStaffs accordingly.
// Replaces o.R.ActiveStaffs with related.
// Sets related.R.Store's ActiveStaffs accordingly.
// Uses the global database handle.
func (o *Store) SetActiveStaffsG(ctx context.Context, insert bool, related ...*ActiveStaff) error {
	return o.SetActiveStaffs(ctx, boil.GetContextDB(), insert, related...)
}

// SetActiveStaffs removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Store's ActiveStaffs accordingly.
// Replaces o.R.ActiveStaffs with related.
// Sets related.R.Store's ActiveStaffs accordingly.
func (o *Store) SetActiveStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActiveStaff) error {
	query := "update `active_staff` set `store_id` = null where `store_id` = ?"
	values := []interface{}{o.StoreID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ActiveStaffs {
			queries.SetScanner(&rel.StoreID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Store = nil
		}
		o.R.ActiveStaffs = nil
	}

	return o.AddActiveStaffs(ctx, exec, insert, related...)
}

// RemoveActiveStaffsG relationships from objects passed in.
// Removes related items from R.ActiveStaffs (uses pointer comparison, removal does not keep order)
// Sets related.R.Store.
// Uses the global database handle.
func (o *Store) RemoveActiveStaffsG(ctx context.Context, related ...*ActiveStaff) error {
	return o.RemoveActiveStaffs(ctx, boil.GetContextDB(), related...)
}

// RemoveActiveStaffs relationships from objects passed in.
// Removes related items from R.ActiveStaffs (uses pointer comparison, removal does not keep order)
// Sets related.R.Store.
func (o *Store) RemoveActiveStaffs(ctx context.Context, exec boil.ContextExecutor, related ...*ActiveStaff) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StoreID, nil)
		if rel.R != nil {
			rel.R.Store = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("store_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ActiveStaffs {
			if rel != ri {
				continue
			}

			ln := len(o.R.ActiveStaffs)
			if ln > 1 && i < ln-1 {
				o.R.ActiveStaffs[i] = o.R.ActiveStaffs[ln-1]
			}
			o.R.ActiveStaffs = o.R.ActiveStaffs[:ln-1]
			break
		}
	}

	return nil
}

// AddCustomersG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Stores appropriately.
// Uses the global database handle.
func (o *Store) AddCustomersG(ctx context.Context, insert bool, related ...*Customer) error {
	return o.AddCustomers(ctx, boil.GetContextDB(), insert, related...)
}

// AddCustomers adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.Stores appropriately.
func (o *Store) AddCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Customer) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `favorite_stores` (`store_id`, `customer_id`) values (?, ?)"
		values := []interface{}{o.StoreID, rel.CustomerID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &storeR{
			Customers: related,
		}
	} else {
		o.R.Customers = append(o.R.Customers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerR{
				Stores: StoreSlice{o},
			}
		} else {
			rel.R.Stores = append(rel.R.Stores, o)
		}
	}
	return nil
}

// SetCustomersG removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Stores's Customers accordingly.
// Replaces o.R.Customers with related.
// Sets related.R.Stores's Customers accordingly.
// Uses the global database handle.
func (o *Store) SetCustomersG(ctx context.Context, insert bool, related ...*Customer) error {
	return o.SetCustomers(ctx, boil.GetContextDB(), insert, related...)
}

// SetCustomers removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Stores's Customers accordingly.
// Replaces o.R.Customers with related.
// Sets related.R.Stores's Customers accordingly.
func (o *Store) SetCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Customer) error {
	query := "delete from `favorite_stores` where `store_id` = ?"
	values := []interface{}{o.StoreID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCustomersFromStoresSlice(o, related)
	if o.R != nil {
		o.R.Customers = nil
	}

	return o.AddCustomers(ctx, exec, insert, related...)
}

// RemoveCustomersG relationships from objects passed in.
// Removes related items from R.Customers (uses pointer comparison, removal does not keep order)
// Sets related.R.Stores.
// Uses the global database handle.
func (o *Store) RemoveCustomersG(ctx context.Context, related ...*Customer) error {
	return o.RemoveCustomers(ctx, boil.GetContextDB(), related...)
}

// RemoveCustomers relationships from objects passed in.
// Removes related items from R.Customers (uses pointer comparison, removal does not keep order)
// Sets related.R.Stores.
func (o *Store) RemoveCustomers(ctx context.Context, exec boil.ContextExecutor, related ...*Customer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `favorite_stores` where `store_id` = ? and `customer_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.StoreID}
	for _, rel := range related {
		values = append(values, rel.CustomerID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCustomersFromStoresSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Customers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Customers)
			if ln > 1 && i < ln-1 {
				o.R.Customers[i] = o.R.Customers[ln-1]
			}
			o.R.Customers = o.R.Customers[:ln-1]
			break
		}
	}

	return nil
}

func removeCustomersFromStoresSlice(o *Store, related []*Customer) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Stores {
			if o.StoreID != ri.StoreID {
				continue
			}

			ln := len(rel.R.Stores)
			if ln > 1 && i < ln-1 {
				rel.R.Stores[i] = rel.R.Stores[ln-1]
			}
			rel.R.Stores = rel.R.Stores[:ln-1]
			break
		}
	}
}

// AddMenusG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Menus.
// Sets related.R.Store appropriately.
// Uses the global database handle.
func (o *Store) AddMenusG(ctx context.Context, insert bool, related ...*Menu) error {
	return o.AddMenus(ctx, boil.GetContextDB(), insert, related...)
}

// AddMenus adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Menus.
// Sets related.R.Store appropriately.
func (o *Store) AddMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Menu) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StoreID, o.StoreID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `menus` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
				strmangle.WhereClause("`", "`", 0, menuPrimaryKeyColumns),
			)
			values := []interface{}{o.StoreID, rel.MenuID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StoreID, o.StoreID)
		}
	}

	if o.R == nil {
		o.R = &storeR{
			Menus: related,
		}
	} else {
		o.R.Menus = append(o.R.Menus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// SetMenusG removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Store's Menus accordingly.
// Replaces o.R.Menus with related.
// Sets related.R.Store's Menus accordingly.
// Uses the global database handle.
func (o *Store) SetMenusG(ctx context.Context, insert bool, related ...*Menu) error {
	return o.SetMenus(ctx, boil.GetContextDB(), insert, related...)
}

// SetMenus removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Store's Menus accordingly.
// Replaces o.R.Menus with related.
// Sets related.R.Store's Menus accordingly.
func (o *Store) SetMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Menu) error {
	query := "update `menus` set `store_id` = null where `store_id` = ?"
	values := []interface{}{o.StoreID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Menus {
			queries.SetScanner(&rel.StoreID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Store = nil
		}
		o.R.Menus = nil
	}

	return o.AddMenus(ctx, exec, insert, related...)
}

// RemoveMenusG relationships from objects passed in.
// Removes related items from R.Menus (uses pointer comparison, removal does not keep order)
// Sets related.R.Store.
// Uses the global database handle.
func (o *Store) RemoveMenusG(ctx context.Context, related ...*Menu) error {
	return o.RemoveMenus(ctx, boil.GetContextDB(), related...)
}

// RemoveMenus relationships from objects passed in.
// Removes related items from R.Menus (uses pointer comparison, removal does not keep order)
// Sets related.R.Store.
func (o *Store) RemoveMenus(ctx context.Context, exec boil.ContextExecutor, related ...*Menu) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StoreID, nil)
		if rel.R != nil {
			rel.R.Store = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("store_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Menus {
			if rel != ri {
				continue
			}

			ln := len(o.R.Menus)
			if ln > 1 && i < ln-1 {
				o.R.Menus[i] = o.R.Menus[ln-1]
			}
			o.R.Menus = o.R.Menus[:ln-1]
			break
		}
	}

	return nil
}

// AddReservationsG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Reservations.
// Sets related.R.Store appropriately.
// Uses the global database handle.
func (o *Store) AddReservationsG(ctx context.Context, insert bool, related ...*Reservation) error {
	return o.AddReservations(ctx, boil.GetContextDB(), insert, related...)
}

// AddReservations adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Reservations.
// Sets related.R.Store appropriately.
func (o *Store) AddReservations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reservation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StoreID = o.StoreID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reservations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
				strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
			)
			values := []interface{}{o.StoreID, rel.ReservationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StoreID = o.StoreID
		}
	}

	if o.R == nil {
		o.R = &storeR{
			Reservations: related,
		}
	} else {
		o.R.Reservations = append(o.R.Reservations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reservationR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// AddStaffsG adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Stores appropriately.
// Uses the global database handle.
func (o *Store) AddStaffsG(ctx context.Context, insert bool, related ...*Staff) error {
	return o.AddStaffs(ctx, boil.GetContextDB(), insert, related...)
}

// AddStaffs adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.Stores appropriately.
func (o *Store) AddStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `store_staff` (`store_id`, `staff_id`) values (?, ?)"
		values := []interface{}{o.StoreID, rel.StaffID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &storeR{
			Staffs: related,
		}
	} else {
		o.R.Staffs = append(o.R.Staffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				Stores: StoreSlice{o},
			}
		} else {
			rel.R.Stores = append(rel.R.Stores, o)
		}
	}
	return nil
}

// SetStaffsG removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Stores's Staffs accordingly.
// Replaces o.R.Staffs with related.
// Sets related.R.Stores's Staffs accordingly.
// Uses the global database handle.
func (o *Store) SetStaffsG(ctx context.Context, insert bool, related ...*Staff) error {
	return o.SetStaffs(ctx, boil.GetContextDB(), insert, related...)
}

// SetStaffs removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Stores's Staffs accordingly.
// Replaces o.R.Staffs with related.
// Sets related.R.Stores's Staffs accordingly.
func (o *Store) SetStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	query := "delete from `store_staff` where `store_id` = ?"
	values := []interface{}{o.StoreID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStaffsFromStoresSlice(o, related)
	if o.R != nil {
		o.R.Staffs = nil
	}

	return o.AddStaffs(ctx, exec, insert, related...)
}

// RemoveStaffsG relationships from objects passed in.
// Removes related items from R.Staffs (uses pointer comparison, removal does not keep order)
// Sets related.R.Stores.
// Uses the global database handle.
func (o *Store) RemoveStaffsG(ctx context.Context, related ...*Staff) error {
	return o.RemoveStaffs(ctx, boil.GetContextDB(), related...)
}

// RemoveStaffs relationships from objects passed in.
// Removes related items from R.Staffs (uses pointer comparison, removal does not keep order)
// Sets related.R.Stores.
func (o *Store) RemoveStaffs(ctx context.Context, exec boil.ContextExecutor, related ...*Staff) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `store_staff` where `store_id` = ? and `staff_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.StoreID}
	for _, rel := range related {
		values = append(values, rel.StaffID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStaffsFromStoresSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Staffs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Staffs)
			if ln > 1 && i < ln-1 {
				o.R.Staffs[i] = o.R.Staffs[ln-1]
			}
			o.R.Staffs = o.R.Staffs[:ln-1]
			break
		}
	}

	return nil
}

func removeStaffsFromStoresSlice(o *Store, related []*Staff) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Stores {
			if o.StoreID != ri.StoreID {
				continue
			}

			ln := len(rel.R.Stores)
			if ln > 1 && i < ln-1 {
				rel.R.Stores[i] = rel.R.Stores[ln-1]
			}
			rel.R.Stores = rel.R.Stores[:ln-1]
			break
		}
	}
}

// Stores retrieves all the records using an executor.
func Stores(mods ...qm.QueryMod) storeQuery {
	mods = append(mods, qm.From("`stores`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`stores`.*"})
	}

	return storeQuery{q}
}

// FindStoreG retrieves a single record by ID.
func FindStoreG(ctx context.Context, storeID int, selectCols ...string) (*Store, error) {
	return FindStore(ctx, boil.GetContextDB(), storeID, selectCols...)
}

// FindStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStore(ctx context.Context, exec boil.ContextExecutor, storeID int, selectCols ...string) (*Store, error) {
	storeObj := &Store{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `stores` where `store_id`=?", sel,
	)

	q := queries.Raw(query, storeID)

	err := q.Bind(ctx, exec, storeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stores")
	}

	if err = storeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return storeObj, err
	}

	return storeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Store) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Store) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stores provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeInsertCacheMut.RLock()
	cache, cached := storeInsertCache[key]
	storeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeAllColumns,
			storeColumnsWithDefault,
			storeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeType, storeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `stores` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `stores` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `stores` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stores")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StoreID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for stores")
	}

CacheNoHooks:
	if !cached {
		storeInsertCacheMut.Lock()
		storeInsertCache[key] = cache
		storeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Store record using the global executor.
// See Update for more documentation.
func (o *Store) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Store.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Store) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storeUpdateCacheMut.RLock()
	cache, cached := storeUpdateCache[key]
	storeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeAllColumns,
			storePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `stores` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, append(wl, storePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stores")
	}

	if !cached {
		storeUpdateCacheMut.Lock()
		storeUpdateCache[key] = cache
		storeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q storeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q storeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stores")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StoreSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `stores` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in store slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all store")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Store) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLStoreUniqueColumns = []string{
	"store_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Store) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stores provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStoreUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeUpsertCacheMut.RLock()
	cache, cached := storeUpsertCache[key]
	storeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storeAllColumns,
			storeColumnsWithDefault,
			storeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storeAllColumns,
			storePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert stores, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`stores`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `stores` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeType, storeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for stores")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(storeType, storeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for stores")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for stores")
	}

CacheNoHooks:
	if !cached {
		storeUpsertCacheMut.Lock()
		storeUpsertCache[key] = cache
		storeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Store record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Store) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Store record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Store) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Store provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storePrimaryKeyMapping)
	sql := "DELETE FROM `stores` WHERE `store_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stores")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q storeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q storeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stores")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o StoreSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `stores` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from store slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stores")
	}

	if len(storeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Store) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Store provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Store) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStore(ctx, exec, o.StoreID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty StoreSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `stores`.* FROM `stores` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, storePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StoreSlice")
	}

	*o = slice

	return nil
}

// StoreExistsG checks if the Store row exists.
func StoreExistsG(ctx context.Context, storeID int) (bool, error) {
	return StoreExists(ctx, boil.GetContextDB(), storeID)
}

// StoreExists checks if the Store row exists.
func StoreExists(ctx context.Context, exec boil.ContextExecutor, storeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `stores` where `store_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, storeID)
	}
	row := exec.QueryRowContext(ctx, sql, storeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stores exists")
	}

	return exists, nil
}

// Exists checks if the Store row exists.
func (o *Store) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StoreExists(ctx, exec, o.StoreID)
}
