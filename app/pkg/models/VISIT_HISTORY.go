// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// VisitHistory is an object representing the database table.
type VisitHistory struct {
	VisitHistoryID int               `boil:"visit_history_id" json:"visit_history_id" toml:"visit_history_id" yaml:"visit_history_id"`
	ReservationID  null.Int          `boil:"reservation_id" json:"reservation_id,omitempty" toml:"reservation_id" yaml:"reservation_id,omitempty"`
	MenuName       null.String       `boil:"menu_name" json:"menu_name,omitempty" toml:"menu_name" yaml:"menu_name,omitempty"`
	Price          types.NullDecimal `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	CreatedAt      time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedBy      null.Int          `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	CreatedByType  string            `boil:"created_by_type" json:"created_by_type" toml:"created_by_type" yaml:"created_by_type"`
	UpdatedBy      null.Int          `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	UpdatedByType  string            `boil:"updated_by_type" json:"updated_by_type" toml:"updated_by_type" yaml:"updated_by_type"`

	R *visitHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L visitHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VisitHistoryColumns = struct {
	VisitHistoryID string
	ReservationID  string
	MenuName       string
	Price          string
	CreatedAt      string
	UpdatedAt      string
	CreatedBy      string
	CreatedByType  string
	UpdatedBy      string
	UpdatedByType  string
}{
	VisitHistoryID: "visit_history_id",
	ReservationID:  "reservation_id",
	MenuName:       "menu_name",
	Price:          "price",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	CreatedBy:      "created_by",
	CreatedByType:  "created_by_type",
	UpdatedBy:      "updated_by",
	UpdatedByType:  "updated_by_type",
}

var VisitHistoryTableColumns = struct {
	VisitHistoryID string
	ReservationID  string
	MenuName       string
	Price          string
	CreatedAt      string
	UpdatedAt      string
	CreatedBy      string
	CreatedByType  string
	UpdatedBy      string
	UpdatedByType  string
}{
	VisitHistoryID: "visit_history.visit_history_id",
	ReservationID:  "visit_history.reservation_id",
	MenuName:       "visit_history.menu_name",
	Price:          "visit_history.price",
	CreatedAt:      "visit_history.created_at",
	UpdatedAt:      "visit_history.updated_at",
	CreatedBy:      "visit_history.created_by",
	CreatedByType:  "visit_history.created_by_type",
	UpdatedBy:      "visit_history.updated_by",
	UpdatedByType:  "visit_history.updated_by_type",
}

// Generated where

var VisitHistoryWhere = struct {
	VisitHistoryID whereHelperint
	ReservationID  whereHelpernull_Int
	MenuName       whereHelpernull_String
	Price          whereHelpertypes_NullDecimal
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	CreatedBy      whereHelpernull_Int
	CreatedByType  whereHelperstring
	UpdatedBy      whereHelpernull_Int
	UpdatedByType  whereHelperstring
}{
	VisitHistoryID: whereHelperint{field: "`visit_history`.`visit_history_id`"},
	ReservationID:  whereHelpernull_Int{field: "`visit_history`.`reservation_id`"},
	MenuName:       whereHelpernull_String{field: "`visit_history`.`menu_name`"},
	Price:          whereHelpertypes_NullDecimal{field: "`visit_history`.`price`"},
	CreatedAt:      whereHelpertime_Time{field: "`visit_history`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`visit_history`.`updated_at`"},
	CreatedBy:      whereHelpernull_Int{field: "`visit_history`.`created_by`"},
	CreatedByType:  whereHelperstring{field: "`visit_history`.`created_by_type`"},
	UpdatedBy:      whereHelpernull_Int{field: "`visit_history`.`updated_by`"},
	UpdatedByType:  whereHelperstring{field: "`visit_history`.`updated_by_type`"},
}

// VisitHistoryRels is where relationship names are stored.
var VisitHistoryRels = struct {
	Reservation string
}{
	Reservation: "Reservation",
}

// visitHistoryR is where relationships are stored.
type visitHistoryR struct {
	Reservation *Reservation `boil:"Reservation" json:"Reservation" toml:"Reservation" yaml:"Reservation"`
}

// NewStruct creates a new relationship struct
func (*visitHistoryR) NewStruct() *visitHistoryR {
	return &visitHistoryR{}
}

func (r *visitHistoryR) GetReservation() *Reservation {
	if r == nil {
		return nil
	}
	return r.Reservation
}

// visitHistoryL is where Load methods for each relationship are stored.
type visitHistoryL struct{}

var (
	visitHistoryAllColumns            = []string{"visit_history_id", "reservation_id", "menu_name", "price", "created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	visitHistoryColumnsWithoutDefault = []string{"visit_history_id", "reservation_id", "menu_name", "price"}
	visitHistoryColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	visitHistoryPrimaryKeyColumns     = []string{"visit_history_id"}
	visitHistoryGeneratedColumns      = []string{}
)

type (
	// VisitHistorySlice is an alias for a slice of pointers to VisitHistory.
	// This should almost always be used instead of []VisitHistory.
	VisitHistorySlice []*VisitHistory
	// VisitHistoryHook is the signature for custom VisitHistory hook methods
	VisitHistoryHook func(context.Context, boil.ContextExecutor, *VisitHistory) error

	visitHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	visitHistoryType                 = reflect.TypeOf(&VisitHistory{})
	visitHistoryMapping              = queries.MakeStructMapping(visitHistoryType)
	visitHistoryPrimaryKeyMapping, _ = queries.BindMapping(visitHistoryType, visitHistoryMapping, visitHistoryPrimaryKeyColumns)
	visitHistoryInsertCacheMut       sync.RWMutex
	visitHistoryInsertCache          = make(map[string]insertCache)
	visitHistoryUpdateCacheMut       sync.RWMutex
	visitHistoryUpdateCache          = make(map[string]updateCache)
	visitHistoryUpsertCacheMut       sync.RWMutex
	visitHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var visitHistoryAfterSelectHooks []VisitHistoryHook

var visitHistoryBeforeInsertHooks []VisitHistoryHook
var visitHistoryAfterInsertHooks []VisitHistoryHook

var visitHistoryBeforeUpdateHooks []VisitHistoryHook
var visitHistoryAfterUpdateHooks []VisitHistoryHook

var visitHistoryBeforeDeleteHooks []VisitHistoryHook
var visitHistoryAfterDeleteHooks []VisitHistoryHook

var visitHistoryBeforeUpsertHooks []VisitHistoryHook
var visitHistoryAfterUpsertHooks []VisitHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VisitHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VisitHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VisitHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VisitHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VisitHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VisitHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VisitHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VisitHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VisitHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVisitHistoryHook registers your hook function for all future operations.
func AddVisitHistoryHook(hookPoint boil.HookPoint, visitHistoryHook VisitHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		visitHistoryAfterSelectHooks = append(visitHistoryAfterSelectHooks, visitHistoryHook)
	case boil.BeforeInsertHook:
		visitHistoryBeforeInsertHooks = append(visitHistoryBeforeInsertHooks, visitHistoryHook)
	case boil.AfterInsertHook:
		visitHistoryAfterInsertHooks = append(visitHistoryAfterInsertHooks, visitHistoryHook)
	case boil.BeforeUpdateHook:
		visitHistoryBeforeUpdateHooks = append(visitHistoryBeforeUpdateHooks, visitHistoryHook)
	case boil.AfterUpdateHook:
		visitHistoryAfterUpdateHooks = append(visitHistoryAfterUpdateHooks, visitHistoryHook)
	case boil.BeforeDeleteHook:
		visitHistoryBeforeDeleteHooks = append(visitHistoryBeforeDeleteHooks, visitHistoryHook)
	case boil.AfterDeleteHook:
		visitHistoryAfterDeleteHooks = append(visitHistoryAfterDeleteHooks, visitHistoryHook)
	case boil.BeforeUpsertHook:
		visitHistoryBeforeUpsertHooks = append(visitHistoryBeforeUpsertHooks, visitHistoryHook)
	case boil.AfterUpsertHook:
		visitHistoryAfterUpsertHooks = append(visitHistoryAfterUpsertHooks, visitHistoryHook)
	}
}

// OneG returns a single visitHistory record from the query using the global executor.
func (q visitHistoryQuery) OneG(ctx context.Context) (*VisitHistory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single visitHistory record from the query.
func (q visitHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VisitHistory, error) {
	o := &VisitHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for visit_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all VisitHistory records from the query using the global executor.
func (q visitHistoryQuery) AllG(ctx context.Context) (VisitHistorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all VisitHistory records from the query.
func (q visitHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (VisitHistorySlice, error) {
	var o []*VisitHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VisitHistory slice")
	}

	if len(visitHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all VisitHistory records in the query using the global executor
func (q visitHistoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all VisitHistory records in the query.
func (q visitHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count visit_history rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q visitHistoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q visitHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if visit_history exists")
	}

	return count > 0, nil
}

// Reservation pointed to by the foreign key.
func (o *VisitHistory) Reservation(mods ...qm.QueryMod) reservationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`reservation_id` = ?", o.ReservationID),
	}

	queryMods = append(queryMods, mods...)

	return Reservations(queryMods...)
}

// LoadReservation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (visitHistoryL) LoadReservation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVisitHistory interface{}, mods queries.Applicator) error {
	var slice []*VisitHistory
	var object *VisitHistory

	if singular {
		var ok bool
		object, ok = maybeVisitHistory.(*VisitHistory)
		if !ok {
			object = new(VisitHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVisitHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVisitHistory))
			}
		}
	} else {
		s, ok := maybeVisitHistory.(*[]*VisitHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVisitHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVisitHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &visitHistoryR{}
		}
		if !queries.IsNil(object.ReservationID) {
			args = append(args, object.ReservationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &visitHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ReservationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ReservationID) {
				args = append(args, obj.ReservationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reservations`),
		qm.WhereIn(`reservations.reservation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reservation")
	}

	var resultSlice []*Reservation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reservation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reservations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reservations")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reservation = foreign
		if foreign.R == nil {
			foreign.R = &reservationR{}
		}
		foreign.R.VisitHistories = append(foreign.R.VisitHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReservationID, foreign.ReservationID) {
				local.R.Reservation = foreign
				if foreign.R == nil {
					foreign.R = &reservationR{}
				}
				foreign.R.VisitHistories = append(foreign.R.VisitHistories, local)
				break
			}
		}
	}

	return nil
}

// SetReservationG of the visitHistory to the related item.
// Sets o.R.Reservation to related.
// Adds o to related.R.VisitHistories.
// Uses the global database handle.
func (o *VisitHistory) SetReservationG(ctx context.Context, insert bool, related *Reservation) error {
	return o.SetReservation(ctx, boil.GetContextDB(), insert, related)
}

// SetReservation of the visitHistory to the related item.
// Sets o.R.Reservation to related.
// Adds o to related.R.VisitHistories.
func (o *VisitHistory) SetReservation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reservation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `visit_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reservation_id"}),
		strmangle.WhereClause("`", "`", 0, visitHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ReservationID, o.VisitHistoryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReservationID, related.ReservationID)
	if o.R == nil {
		o.R = &visitHistoryR{
			Reservation: related,
		}
	} else {
		o.R.Reservation = related
	}

	if related.R == nil {
		related.R = &reservationR{
			VisitHistories: VisitHistorySlice{o},
		}
	} else {
		related.R.VisitHistories = append(related.R.VisitHistories, o)
	}

	return nil
}

// RemoveReservationG relationship.
// Sets o.R.Reservation to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *VisitHistory) RemoveReservationG(ctx context.Context, related *Reservation) error {
	return o.RemoveReservation(ctx, boil.GetContextDB(), related)
}

// RemoveReservation relationship.
// Sets o.R.Reservation to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VisitHistory) RemoveReservation(ctx context.Context, exec boil.ContextExecutor, related *Reservation) error {
	var err error

	queries.SetScanner(&o.ReservationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("reservation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Reservation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VisitHistories {
		if queries.Equal(o.ReservationID, ri.ReservationID) {
			continue
		}

		ln := len(related.R.VisitHistories)
		if ln > 1 && i < ln-1 {
			related.R.VisitHistories[i] = related.R.VisitHistories[ln-1]
		}
		related.R.VisitHistories = related.R.VisitHistories[:ln-1]
		break
	}
	return nil
}

// VisitHistories retrieves all the records using an executor.
func VisitHistories(mods ...qm.QueryMod) visitHistoryQuery {
	mods = append(mods, qm.From("`visit_history`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`visit_history`.*"})
	}

	return visitHistoryQuery{q}
}

// FindVisitHistoryG retrieves a single record by ID.
func FindVisitHistoryG(ctx context.Context, visitHistoryID int, selectCols ...string) (*VisitHistory, error) {
	return FindVisitHistory(ctx, boil.GetContextDB(), visitHistoryID, selectCols...)
}

// FindVisitHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVisitHistory(ctx context.Context, exec boil.ContextExecutor, visitHistoryID int, selectCols ...string) (*VisitHistory, error) {
	visitHistoryObj := &VisitHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `visit_history` where `visit_history_id`=?", sel,
	)

	q := queries.Raw(query, visitHistoryID)

	err := q.Bind(ctx, exec, visitHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from visit_history")
	}

	if err = visitHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return visitHistoryObj, err
	}

	return visitHistoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *VisitHistory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VisitHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no visit_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visitHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	visitHistoryInsertCacheMut.RLock()
	cache, cached := visitHistoryInsertCache[key]
	visitHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			visitHistoryAllColumns,
			visitHistoryColumnsWithDefault,
			visitHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(visitHistoryType, visitHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(visitHistoryType, visitHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `visit_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `visit_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `visit_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, visitHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into visit_history")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.VisitHistoryID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for visit_history")
	}

CacheNoHooks:
	if !cached {
		visitHistoryInsertCacheMut.Lock()
		visitHistoryInsertCache[key] = cache
		visitHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single VisitHistory record using the global executor.
// See Update for more documentation.
func (o *VisitHistory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the VisitHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VisitHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	visitHistoryUpdateCacheMut.RLock()
	cache, cached := visitHistoryUpdateCache[key]
	visitHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			visitHistoryAllColumns,
			visitHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update visit_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `visit_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, visitHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(visitHistoryType, visitHistoryMapping, append(wl, visitHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update visit_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for visit_history")
	}

	if !cached {
		visitHistoryUpdateCacheMut.Lock()
		visitHistoryUpdateCache[key] = cache
		visitHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q visitHistoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q visitHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for visit_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for visit_history")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o VisitHistorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VisitHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visitHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `visit_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visitHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in visitHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all visitHistory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *VisitHistory) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLVisitHistoryUniqueColumns = []string{
	"visit_history_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VisitHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no visit_history provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visitHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLVisitHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	visitHistoryUpsertCacheMut.RLock()
	cache, cached := visitHistoryUpsertCache[key]
	visitHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			visitHistoryAllColumns,
			visitHistoryColumnsWithDefault,
			visitHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			visitHistoryAllColumns,
			visitHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert visit_history, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`visit_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `visit_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(visitHistoryType, visitHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(visitHistoryType, visitHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for visit_history")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(visitHistoryType, visitHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for visit_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for visit_history")
	}

CacheNoHooks:
	if !cached {
		visitHistoryUpsertCacheMut.Lock()
		visitHistoryUpsertCache[key] = cache
		visitHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single VisitHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *VisitHistory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single VisitHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VisitHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VisitHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), visitHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `visit_history` WHERE `visit_history_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from visit_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for visit_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q visitHistoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q visitHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no visitHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from visit_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for visit_history")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o VisitHistorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VisitHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(visitHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visitHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `visit_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visitHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from visitHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for visit_history")
	}

	if len(visitHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *VisitHistory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no VisitHistory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VisitHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVisitHistory(ctx, exec, o.VisitHistoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VisitHistorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty VisitHistorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VisitHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VisitHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visitHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `visit_history`.* FROM `visit_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visitHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VisitHistorySlice")
	}

	*o = slice

	return nil
}

// VisitHistoryExistsG checks if the VisitHistory row exists.
func VisitHistoryExistsG(ctx context.Context, visitHistoryID int) (bool, error) {
	return VisitHistoryExists(ctx, boil.GetContextDB(), visitHistoryID)
}

// VisitHistoryExists checks if the VisitHistory row exists.
func VisitHistoryExists(ctx context.Context, exec boil.ContextExecutor, visitHistoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `visit_history` where `visit_history_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, visitHistoryID)
	}
	row := exec.QueryRowContext(ctx, sql, visitHistoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if visit_history exists")
	}

	return exists, nil
}

// Exists checks if the VisitHistory row exists.
func (o *VisitHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VisitHistoryExists(ctx, exec, o.VisitHistoryID)
}
