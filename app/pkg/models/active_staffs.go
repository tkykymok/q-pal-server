// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ActiveStaff is an object representing the database table.
type ActiveStaff struct {
	StaffID            int       `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	StoreID            int       `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	BreakStartDatetime null.Time `boil:"break_start_datetime" json:"break_start_datetime,omitempty" toml:"break_start_datetime" yaml:"break_start_datetime,omitempty"`
	BreakEndDatetime   null.Time `boil:"break_end_datetime" json:"break_end_datetime,omitempty" toml:"break_end_datetime" yaml:"break_end_datetime,omitempty"`

	R *activeStaffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L activeStaffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActiveStaffColumns = struct {
	StaffID            string
	StoreID            string
	BreakStartDatetime string
	BreakEndDatetime   string
}{
	StaffID:            "staff_id",
	StoreID:            "store_id",
	BreakStartDatetime: "break_start_datetime",
	BreakEndDatetime:   "break_end_datetime",
}

var ActiveStaffTableColumns = struct {
	StaffID            string
	StoreID            string
	BreakStartDatetime string
	BreakEndDatetime   string
}{
	StaffID:            "active_staffs.staff_id",
	StoreID:            "active_staffs.store_id",
	BreakStartDatetime: "active_staffs.break_start_datetime",
	BreakEndDatetime:   "active_staffs.break_end_datetime",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ActiveStaffWhere = struct {
	StaffID            whereHelperint
	StoreID            whereHelperint
	BreakStartDatetime whereHelpernull_Time
	BreakEndDatetime   whereHelpernull_Time
}{
	StaffID:            whereHelperint{field: "`active_staffs`.`staff_id`"},
	StoreID:            whereHelperint{field: "`active_staffs`.`store_id`"},
	BreakStartDatetime: whereHelpernull_Time{field: "`active_staffs`.`break_start_datetime`"},
	BreakEndDatetime:   whereHelpernull_Time{field: "`active_staffs`.`break_end_datetime`"},
}

// ActiveStaffRels is where relationship names are stored.
var ActiveStaffRels = struct {
	Staff string
	Store string
}{
	Staff: "Staff",
	Store: "Store",
}

// activeStaffR is where relationships are stored.
type activeStaffR struct {
	Staff *Staff `boil:"Staff" json:"Staff" toml:"Staff" yaml:"Staff"`
	Store *Store `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
}

// NewStruct creates a new relationship struct
func (*activeStaffR) NewStruct() *activeStaffR {
	return &activeStaffR{}
}

func (r *activeStaffR) GetStaff() *Staff {
	if r == nil {
		return nil
	}
	return r.Staff
}

func (r *activeStaffR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

// activeStaffL is where Load methods for each relationship are stored.
type activeStaffL struct{}

var (
	activeStaffAllColumns            = []string{"staff_id", "store_id", "break_start_datetime", "break_end_datetime"}
	activeStaffColumnsWithoutDefault = []string{"staff_id", "store_id", "break_start_datetime", "break_end_datetime"}
	activeStaffColumnsWithDefault    = []string{}
	activeStaffPrimaryKeyColumns     = []string{"staff_id"}
	activeStaffGeneratedColumns      = []string{}
)

type (
	// ActiveStaffSlice is an alias for a slice of pointers to ActiveStaff.
	// This should almost always be used instead of []ActiveStaff.
	ActiveStaffSlice []*ActiveStaff
	// ActiveStaffHook is the signature for custom ActiveStaff hook methods
	ActiveStaffHook func(context.Context, boil.ContextExecutor, *ActiveStaff) error

	activeStaffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	activeStaffType                 = reflect.TypeOf(&ActiveStaff{})
	activeStaffMapping              = queries.MakeStructMapping(activeStaffType)
	activeStaffPrimaryKeyMapping, _ = queries.BindMapping(activeStaffType, activeStaffMapping, activeStaffPrimaryKeyColumns)
	activeStaffInsertCacheMut       sync.RWMutex
	activeStaffInsertCache          = make(map[string]insertCache)
	activeStaffUpdateCacheMut       sync.RWMutex
	activeStaffUpdateCache          = make(map[string]updateCache)
	activeStaffUpsertCacheMut       sync.RWMutex
	activeStaffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var activeStaffAfterSelectHooks []ActiveStaffHook

var activeStaffBeforeInsertHooks []ActiveStaffHook
var activeStaffAfterInsertHooks []ActiveStaffHook

var activeStaffBeforeUpdateHooks []ActiveStaffHook
var activeStaffAfterUpdateHooks []ActiveStaffHook

var activeStaffBeforeDeleteHooks []ActiveStaffHook
var activeStaffAfterDeleteHooks []ActiveStaffHook

var activeStaffBeforeUpsertHooks []ActiveStaffHook
var activeStaffAfterUpsertHooks []ActiveStaffHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActiveStaff) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActiveStaff) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActiveStaff) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActiveStaff) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActiveStaff) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActiveStaff) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActiveStaff) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActiveStaff) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActiveStaff) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range activeStaffAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActiveStaffHook registers your hook function for all future operations.
func AddActiveStaffHook(hookPoint boil.HookPoint, activeStaffHook ActiveStaffHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		activeStaffAfterSelectHooks = append(activeStaffAfterSelectHooks, activeStaffHook)
	case boil.BeforeInsertHook:
		activeStaffBeforeInsertHooks = append(activeStaffBeforeInsertHooks, activeStaffHook)
	case boil.AfterInsertHook:
		activeStaffAfterInsertHooks = append(activeStaffAfterInsertHooks, activeStaffHook)
	case boil.BeforeUpdateHook:
		activeStaffBeforeUpdateHooks = append(activeStaffBeforeUpdateHooks, activeStaffHook)
	case boil.AfterUpdateHook:
		activeStaffAfterUpdateHooks = append(activeStaffAfterUpdateHooks, activeStaffHook)
	case boil.BeforeDeleteHook:
		activeStaffBeforeDeleteHooks = append(activeStaffBeforeDeleteHooks, activeStaffHook)
	case boil.AfterDeleteHook:
		activeStaffAfterDeleteHooks = append(activeStaffAfterDeleteHooks, activeStaffHook)
	case boil.BeforeUpsertHook:
		activeStaffBeforeUpsertHooks = append(activeStaffBeforeUpsertHooks, activeStaffHook)
	case boil.AfterUpsertHook:
		activeStaffAfterUpsertHooks = append(activeStaffAfterUpsertHooks, activeStaffHook)
	}
}

// OneG returns a single activeStaff record from the query using the global executor.
func (q activeStaffQuery) OneG(ctx context.Context) (*ActiveStaff, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single activeStaff record from the query.
func (q activeStaffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActiveStaff, error) {
	o := &ActiveStaff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for active_staffs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ActiveStaff records from the query using the global executor.
func (q activeStaffQuery) AllG(ctx context.Context) (ActiveStaffSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ActiveStaff records from the query.
func (q activeStaffQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActiveStaffSlice, error) {
	var o []*ActiveStaff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActiveStaff slice")
	}

	if len(activeStaffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ActiveStaff records in the query using the global executor
func (q activeStaffQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ActiveStaff records in the query.
func (q activeStaffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count active_staffs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q activeStaffQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q activeStaffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if active_staffs exists")
	}

	return count > 0, nil
}

// Staff pointed to by the foreign key.
func (o *ActiveStaff) Staff(mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`staff_id` = ?", o.StaffID),
	}

	queryMods = append(queryMods, mods...)

	return Staffs(queryMods...)
}

// Store pointed to by the foreign key.
func (o *ActiveStaff) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`store_id` = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// LoadStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (activeStaffL) LoadStaff(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActiveStaff interface{}, mods queries.Applicator) error {
	var slice []*ActiveStaff
	var object *ActiveStaff

	if singular {
		var ok bool
		object, ok = maybeActiveStaff.(*ActiveStaff)
		if !ok {
			object = new(ActiveStaff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeActiveStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeActiveStaff))
			}
		}
	} else {
		s, ok := maybeActiveStaff.(*[]*ActiveStaff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeActiveStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeActiveStaff))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activeStaffR{}
		}
		args = append(args, object.StaffID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activeStaffR{}
			}

			for _, a := range args {
				if a == obj.StaffID {
					continue Outer
				}
			}

			args = append(args, obj.StaffID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`staffs`),
		qm.WhereIn(`staffs.staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Staff = foreign
		if foreign.R == nil {
			foreign.R = &staffR{}
		}
		foreign.R.ActiveStaff = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffID == foreign.StaffID {
				local.R.Staff = foreign
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.ActiveStaff = local
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (activeStaffL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActiveStaff interface{}, mods queries.Applicator) error {
	var slice []*ActiveStaff
	var object *ActiveStaff

	if singular {
		var ok bool
		object, ok = maybeActiveStaff.(*ActiveStaff)
		if !ok {
			object = new(ActiveStaff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeActiveStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeActiveStaff))
			}
		}
	} else {
		s, ok := maybeActiveStaff.(*[]*ActiveStaff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeActiveStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeActiveStaff))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &activeStaffR{}
		}
		args = append(args, object.StoreID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &activeStaffR{}
			}

			for _, a := range args {
				if a == obj.StoreID {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stores`),
		qm.WhereIn(`stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.ActiveStaffs = append(foreign.R.ActiveStaffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.StoreID {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.ActiveStaffs = append(foreign.R.ActiveStaffs, local)
				break
			}
		}
	}

	return nil
}

// SetStaffG of the activeStaff to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.ActiveStaff.
// Uses the global database handle.
func (o *ActiveStaff) SetStaffG(ctx context.Context, insert bool, related *Staff) error {
	return o.SetStaff(ctx, boil.GetContextDB(), insert, related)
}

// SetStaff of the activeStaff to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.ActiveStaff.
func (o *ActiveStaff) SetStaff(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `active_staffs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
		strmangle.WhereClause("`", "`", 0, activeStaffPrimaryKeyColumns),
	)
	values := []interface{}{related.StaffID, o.StaffID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StaffID = related.StaffID
	if o.R == nil {
		o.R = &activeStaffR{
			Staff: related,
		}
	} else {
		o.R.Staff = related
	}

	if related.R == nil {
		related.R = &staffR{
			ActiveStaff: o,
		}
	} else {
		related.R.ActiveStaff = o
	}

	return nil
}

// SetStoreG of the activeStaff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.ActiveStaffs.
// Uses the global database handle.
func (o *ActiveStaff) SetStoreG(ctx context.Context, insert bool, related *Store) error {
	return o.SetStore(ctx, boil.GetContextDB(), insert, related)
}

// SetStore of the activeStaff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.ActiveStaffs.
func (o *ActiveStaff) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `active_staffs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, activeStaffPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.StaffID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.StoreID
	if o.R == nil {
		o.R = &activeStaffR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			ActiveStaffs: ActiveStaffSlice{o},
		}
	} else {
		related.R.ActiveStaffs = append(related.R.ActiveStaffs, o)
	}

	return nil
}

// ActiveStaffs retrieves all the records using an executor.
func ActiveStaffs(mods ...qm.QueryMod) activeStaffQuery {
	mods = append(mods, qm.From("`active_staffs`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`active_staffs`.*"})
	}

	return activeStaffQuery{q}
}

// FindActiveStaffG retrieves a single record by ID.
func FindActiveStaffG(ctx context.Context, staffID int, selectCols ...string) (*ActiveStaff, error) {
	return FindActiveStaff(ctx, boil.GetContextDB(), staffID, selectCols...)
}

// FindActiveStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActiveStaff(ctx context.Context, exec boil.ContextExecutor, staffID int, selectCols ...string) (*ActiveStaff, error) {
	activeStaffObj := &ActiveStaff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `active_staffs` where `staff_id`=?", sel,
	)

	q := queries.Raw(query, staffID)

	err := q.Bind(ctx, exec, activeStaffObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from active_staffs")
	}

	if err = activeStaffObj.doAfterSelectHooks(ctx, exec); err != nil {
		return activeStaffObj, err
	}

	return activeStaffObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ActiveStaff) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActiveStaff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no active_staffs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activeStaffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	activeStaffInsertCacheMut.RLock()
	cache, cached := activeStaffInsertCache[key]
	activeStaffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			activeStaffAllColumns,
			activeStaffColumnsWithDefault,
			activeStaffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(activeStaffType, activeStaffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(activeStaffType, activeStaffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `active_staffs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `active_staffs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `active_staffs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, activeStaffPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into active_staffs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StaffID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for active_staffs")
	}

CacheNoHooks:
	if !cached {
		activeStaffInsertCacheMut.Lock()
		activeStaffInsertCache[key] = cache
		activeStaffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ActiveStaff record using the global executor.
// See Update for more documentation.
func (o *ActiveStaff) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ActiveStaff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActiveStaff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	activeStaffUpdateCacheMut.RLock()
	cache, cached := activeStaffUpdateCache[key]
	activeStaffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			activeStaffAllColumns,
			activeStaffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update active_staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `active_staffs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, activeStaffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(activeStaffType, activeStaffMapping, append(wl, activeStaffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update active_staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for active_staffs")
	}

	if !cached {
		activeStaffUpdateCacheMut.Lock()
		activeStaffUpdateCache[key] = cache
		activeStaffUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q activeStaffQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q activeStaffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for active_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for active_staffs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ActiveStaffSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActiveStaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activeStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `active_staffs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activeStaffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in activeStaff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all activeStaff")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ActiveStaff) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLActiveStaffUniqueColumns = []string{
	"staff_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActiveStaff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no active_staffs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(activeStaffColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLActiveStaffUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	activeStaffUpsertCacheMut.RLock()
	cache, cached := activeStaffUpsertCache[key]
	activeStaffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			activeStaffAllColumns,
			activeStaffColumnsWithDefault,
			activeStaffColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			activeStaffAllColumns,
			activeStaffPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert active_staffs, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`active_staffs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `active_staffs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(activeStaffType, activeStaffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(activeStaffType, activeStaffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for active_staffs")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(activeStaffType, activeStaffMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for active_staffs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for active_staffs")
	}

CacheNoHooks:
	if !cached {
		activeStaffUpsertCacheMut.Lock()
		activeStaffUpsertCache[key] = cache
		activeStaffUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ActiveStaff record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ActiveStaff) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ActiveStaff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActiveStaff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ActiveStaff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), activeStaffPrimaryKeyMapping)
	sql := "DELETE FROM `active_staffs` WHERE `staff_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from active_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for active_staffs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q activeStaffQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q activeStaffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no activeStaffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from active_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for active_staffs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ActiveStaffSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActiveStaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(activeStaffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activeStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `active_staffs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activeStaffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from activeStaff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for active_staffs")
	}

	if len(activeStaffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ActiveStaff) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ActiveStaff provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActiveStaff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActiveStaff(ctx, exec, o.StaffID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActiveStaffSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ActiveStaffSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActiveStaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActiveStaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), activeStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `active_staffs`.* FROM `active_staffs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, activeStaffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ActiveStaffSlice")
	}

	*o = slice

	return nil
}

// ActiveStaffExistsG checks if the ActiveStaff row exists.
func ActiveStaffExistsG(ctx context.Context, staffID int) (bool, error) {
	return ActiveStaffExists(ctx, boil.GetContextDB(), staffID)
}

// ActiveStaffExists checks if the ActiveStaff row exists.
func ActiveStaffExists(ctx context.Context, exec boil.ContextExecutor, staffID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `active_staffs` where `staff_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, staffID)
	}
	row := exec.QueryRowContext(ctx, sql, staffID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if active_staffs exists")
	}

	return exists, nil
}

// Exists checks if the ActiveStaff row exists.
func (o *ActiveStaff) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ActiveStaffExists(ctx, exec, o.StaffID)
}
