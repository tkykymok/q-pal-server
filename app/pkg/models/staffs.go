// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Staff is an object representing the database table.
type Staff struct {
	StaffID       int         `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	Name          null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	CognitoUserID null.String `boil:"cognito_user_id" json:"cognito_user_id,omitempty" toml:"cognito_user_id" yaml:"cognito_user_id,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedBy     null.Int    `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	CreatedByType string      `boil:"created_by_type" json:"created_by_type" toml:"created_by_type" yaml:"created_by_type"`
	UpdatedBy     null.Int    `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	UpdatedByType string      `boil:"updated_by_type" json:"updated_by_type" toml:"updated_by_type" yaml:"updated_by_type"`

	R *staffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffColumns = struct {
	StaffID       string
	Name          string
	CognitoUserID string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	CreatedByType string
	UpdatedBy     string
	UpdatedByType string
}{
	StaffID:       "staff_id",
	Name:          "name",
	CognitoUserID: "cognito_user_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	CreatedBy:     "created_by",
	CreatedByType: "created_by_type",
	UpdatedBy:     "updated_by",
	UpdatedByType: "updated_by_type",
}

var StaffTableColumns = struct {
	StaffID       string
	Name          string
	CognitoUserID string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	CreatedByType string
	UpdatedBy     string
	UpdatedByType string
}{
	StaffID:       "staffs.staff_id",
	Name:          "staffs.name",
	CognitoUserID: "staffs.cognito_user_id",
	CreatedAt:     "staffs.created_at",
	UpdatedAt:     "staffs.updated_at",
	CreatedBy:     "staffs.created_by",
	CreatedByType: "staffs.created_by_type",
	UpdatedBy:     "staffs.updated_by",
	UpdatedByType: "staffs.updated_by_type",
}

// Generated where

var StaffWhere = struct {
	StaffID       whereHelperint
	Name          whereHelpernull_String
	CognitoUserID whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	CreatedBy     whereHelpernull_Int
	CreatedByType whereHelperstring
	UpdatedBy     whereHelpernull_Int
	UpdatedByType whereHelperstring
}{
	StaffID:       whereHelperint{field: "`staffs`.`staff_id`"},
	Name:          whereHelpernull_String{field: "`staffs`.`name`"},
	CognitoUserID: whereHelpernull_String{field: "`staffs`.`cognito_user_id`"},
	CreatedAt:     whereHelpertime_Time{field: "`staffs`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`staffs`.`updated_at`"},
	CreatedBy:     whereHelpernull_Int{field: "`staffs`.`created_by`"},
	CreatedByType: whereHelperstring{field: "`staffs`.`created_by_type`"},
	UpdatedBy:     whereHelpernull_Int{field: "`staffs`.`updated_by`"},
	UpdatedByType: whereHelperstring{field: "`staffs`.`updated_by_type`"},
}

// StaffRels is where relationship names are stored.
var StaffRels = struct {
	ActiveStaff  string
	Reservations string
	StoreStaffs  string
}{
	ActiveStaff:  "ActiveStaff",
	Reservations: "Reservations",
	StoreStaffs:  "StoreStaffs",
}

// staffR is where relationships are stored.
type staffR struct {
	ActiveStaff  *ActiveStaff     `boil:"ActiveStaff" json:"ActiveStaff" toml:"ActiveStaff" yaml:"ActiveStaff"`
	Reservations ReservationSlice `boil:"Reservations" json:"Reservations" toml:"Reservations" yaml:"Reservations"`
	StoreStaffs  StoreStaffSlice  `boil:"StoreStaffs" json:"StoreStaffs" toml:"StoreStaffs" yaml:"StoreStaffs"`
}

// NewStruct creates a new relationship struct
func (*staffR) NewStruct() *staffR {
	return &staffR{}
}

func (r *staffR) GetActiveStaff() *ActiveStaff {
	if r == nil {
		return nil
	}
	return r.ActiveStaff
}

func (r *staffR) GetReservations() ReservationSlice {
	if r == nil {
		return nil
	}
	return r.Reservations
}

func (r *staffR) GetStoreStaffs() StoreStaffSlice {
	if r == nil {
		return nil
	}
	return r.StoreStaffs
}

// staffL is where Load methods for each relationship are stored.
type staffL struct{}

var (
	staffAllColumns            = []string{"staff_id", "name", "cognito_user_id", "created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	staffColumnsWithoutDefault = []string{"staff_id", "name", "cognito_user_id"}
	staffColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "created_by_type", "updated_by", "updated_by_type"}
	staffPrimaryKeyColumns     = []string{"staff_id"}
	staffGeneratedColumns      = []string{}
)

type (
	// StaffSlice is an alias for a slice of pointers to Staff.
	// This should almost always be used instead of []Staff.
	StaffSlice []*Staff
	// StaffHook is the signature for custom Staff hook methods
	StaffHook func(context.Context, boil.ContextExecutor, *Staff) error

	staffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffType                 = reflect.TypeOf(&Staff{})
	staffMapping              = queries.MakeStructMapping(staffType)
	staffPrimaryKeyMapping, _ = queries.BindMapping(staffType, staffMapping, staffPrimaryKeyColumns)
	staffInsertCacheMut       sync.RWMutex
	staffInsertCache          = make(map[string]insertCache)
	staffUpdateCacheMut       sync.RWMutex
	staffUpdateCache          = make(map[string]updateCache)
	staffUpsertCacheMut       sync.RWMutex
	staffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staffAfterSelectHooks []StaffHook

var staffBeforeInsertHooks []StaffHook
var staffAfterInsertHooks []StaffHook

var staffBeforeUpdateHooks []StaffHook
var staffAfterUpdateHooks []StaffHook

var staffBeforeDeleteHooks []StaffHook
var staffAfterDeleteHooks []StaffHook

var staffBeforeUpsertHooks []StaffHook
var staffAfterUpsertHooks []StaffHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Staff) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Staff) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Staff) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Staff) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Staff) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Staff) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Staff) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Staff) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Staff) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaffHook registers your hook function for all future operations.
func AddStaffHook(hookPoint boil.HookPoint, staffHook StaffHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		staffAfterSelectHooks = append(staffAfterSelectHooks, staffHook)
	case boil.BeforeInsertHook:
		staffBeforeInsertHooks = append(staffBeforeInsertHooks, staffHook)
	case boil.AfterInsertHook:
		staffAfterInsertHooks = append(staffAfterInsertHooks, staffHook)
	case boil.BeforeUpdateHook:
		staffBeforeUpdateHooks = append(staffBeforeUpdateHooks, staffHook)
	case boil.AfterUpdateHook:
		staffAfterUpdateHooks = append(staffAfterUpdateHooks, staffHook)
	case boil.BeforeDeleteHook:
		staffBeforeDeleteHooks = append(staffBeforeDeleteHooks, staffHook)
	case boil.AfterDeleteHook:
		staffAfterDeleteHooks = append(staffAfterDeleteHooks, staffHook)
	case boil.BeforeUpsertHook:
		staffBeforeUpsertHooks = append(staffBeforeUpsertHooks, staffHook)
	case boil.AfterUpsertHook:
		staffAfterUpsertHooks = append(staffAfterUpsertHooks, staffHook)
	}
}

// OneG returns a single staff record from the query using the global executor.
func (q staffQuery) OneG(ctx context.Context) (*Staff, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single staff record from the query.
func (q staffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Staff, error) {
	o := &Staff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for staffs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Staff records from the query using the global executor.
func (q staffQuery) AllG(ctx context.Context) (StaffSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Staff records from the query.
func (q staffQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffSlice, error) {
	var o []*Staff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Staff slice")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Staff records in the query using the global executor
func (q staffQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Staff records in the query.
func (q staffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count staffs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q staffQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q staffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if staffs exists")
	}

	return count > 0, nil
}

// ActiveStaff pointed to by the foreign key.
func (o *Staff) ActiveStaff(mods ...qm.QueryMod) activeStaffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`staff_id` = ?", o.StaffID),
	}

	queryMods = append(queryMods, mods...)

	return ActiveStaffs(queryMods...)
}

// Reservations retrieves all the reservation's Reservations with an executor.
func (o *Staff) Reservations(mods ...qm.QueryMod) reservationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reservations`.`staff_id`=?", o.StaffID),
	)

	return Reservations(queryMods...)
}

// StoreStaffs retrieves all the store_staff's StoreStaffs with an executor.
func (o *Staff) StoreStaffs(mods ...qm.QueryMod) storeStaffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`store_staffs`.`staff_id`=?", o.StaffID),
	)

	return StoreStaffs(queryMods...)
}

// LoadActiveStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (staffL) LoadActiveStaff(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.StaffID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.StaffID {
					continue Outer
				}
			}

			args = append(args, obj.StaffID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`active_staffs`),
		qm.WhereIn(`active_staffs.staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ActiveStaff")
	}

	var resultSlice []*ActiveStaff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ActiveStaff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for active_staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for active_staffs")
	}

	if len(activeStaffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ActiveStaff = foreign
		if foreign.R == nil {
			foreign.R = &activeStaffR{}
		}
		foreign.R.Staff = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffID == foreign.StaffID {
				local.R.ActiveStaff = foreign
				if foreign.R == nil {
					foreign.R = &activeStaffR{}
				}
				foreign.R.Staff = local
				break
			}
		}
	}

	return nil
}

// LoadReservations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadReservations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.StaffID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StaffID) {
					continue Outer
				}
			}

			args = append(args, obj.StaffID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reservations`),
		qm.WhereIn(`reservations.staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reservations")
	}

	var resultSlice []*Reservation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reservations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reservations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reservations")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reservations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reservationR{}
			}
			foreign.R.Staff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.StaffID, foreign.StaffID) {
				local.R.Reservations = append(local.R.Reservations, foreign)
				if foreign.R == nil {
					foreign.R = &reservationR{}
				}
				foreign.R.Staff = local
				break
			}
		}
	}

	return nil
}

// LoadStoreStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadStoreStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.StaffID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.StaffID {
					continue Outer
				}
			}

			args = append(args, obj.StaffID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`store_staffs`),
		qm.WhereIn(`store_staffs.staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store_staffs")
	}

	var resultSlice []*StoreStaff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice store_staffs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store_staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store_staffs")
	}

	if len(storeStaffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StoreStaffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeStaffR{}
			}
			foreign.R.Staff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StaffID == foreign.StaffID {
				local.R.StoreStaffs = append(local.R.StoreStaffs, foreign)
				if foreign.R == nil {
					foreign.R = &storeStaffR{}
				}
				foreign.R.Staff = local
				break
			}
		}
	}

	return nil
}

// SetActiveStaffG of the staff to the related item.
// Sets o.R.ActiveStaff to related.
// Adds o to related.R.Staff.
// Uses the global database handle.
func (o *Staff) SetActiveStaffG(ctx context.Context, insert bool, related *ActiveStaff) error {
	return o.SetActiveStaff(ctx, boil.GetContextDB(), insert, related)
}

// SetActiveStaff of the staff to the related item.
// Sets o.R.ActiveStaff to related.
// Adds o to related.R.Staff.
func (o *Staff) SetActiveStaff(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ActiveStaff) error {
	var err error

	if insert {
		related.StaffID = o.StaffID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `active_staffs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
			strmangle.WhereClause("`", "`", 0, activeStaffPrimaryKeyColumns),
		)
		values := []interface{}{o.StaffID, related.StaffID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.StaffID = o.StaffID
	}

	if o.R == nil {
		o.R = &staffR{
			ActiveStaff: related,
		}
	} else {
		o.R.ActiveStaff = related
	}

	if related.R == nil {
		related.R = &activeStaffR{
			Staff: o,
		}
	} else {
		related.R.Staff = o
	}
	return nil
}

// AddReservationsG adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Reservations.
// Sets related.R.Staff appropriately.
// Uses the global database handle.
func (o *Staff) AddReservationsG(ctx context.Context, insert bool, related ...*Reservation) error {
	return o.AddReservations(ctx, boil.GetContextDB(), insert, related...)
}

// AddReservations adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Reservations.
// Sets related.R.Staff appropriately.
func (o *Staff) AddReservations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reservation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StaffID, o.StaffID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reservations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
				strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.ReservationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StaffID, o.StaffID)
		}
	}

	if o.R == nil {
		o.R = &staffR{
			Reservations: related,
		}
	} else {
		o.R.Reservations = append(o.R.Reservations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reservationR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// SetReservationsG removes all previously related items of the
// staff replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Staff's Reservations accordingly.
// Replaces o.R.Reservations with related.
// Sets related.R.Staff's Reservations accordingly.
// Uses the global database handle.
func (o *Staff) SetReservationsG(ctx context.Context, insert bool, related ...*Reservation) error {
	return o.SetReservations(ctx, boil.GetContextDB(), insert, related...)
}

// SetReservations removes all previously related items of the
// staff replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Staff's Reservations accordingly.
// Replaces o.R.Reservations with related.
// Sets related.R.Staff's Reservations accordingly.
func (o *Staff) SetReservations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reservation) error {
	query := "update `reservations` set `staff_id` = null where `staff_id` = ?"
	values := []interface{}{o.StaffID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Reservations {
			queries.SetScanner(&rel.StaffID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Staff = nil
		}
		o.R.Reservations = nil
	}

	return o.AddReservations(ctx, exec, insert, related...)
}

// RemoveReservationsG relationships from objects passed in.
// Removes related items from R.Reservations (uses pointer comparison, removal does not keep order)
// Sets related.R.Staff.
// Uses the global database handle.
func (o *Staff) RemoveReservationsG(ctx context.Context, related ...*Reservation) error {
	return o.RemoveReservations(ctx, boil.GetContextDB(), related...)
}

// RemoveReservations relationships from objects passed in.
// Removes related items from R.Reservations (uses pointer comparison, removal does not keep order)
// Sets related.R.Staff.
func (o *Staff) RemoveReservations(ctx context.Context, exec boil.ContextExecutor, related ...*Reservation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StaffID, nil)
		if rel.R != nil {
			rel.R.Staff = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("staff_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Reservations {
			if rel != ri {
				continue
			}

			ln := len(o.R.Reservations)
			if ln > 1 && i < ln-1 {
				o.R.Reservations[i] = o.R.Reservations[ln-1]
			}
			o.R.Reservations = o.R.Reservations[:ln-1]
			break
		}
	}

	return nil
}

// AddStoreStaffsG adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.StoreStaffs.
// Sets related.R.Staff appropriately.
// Uses the global database handle.
func (o *Staff) AddStoreStaffsG(ctx context.Context, insert bool, related ...*StoreStaff) error {
	return o.AddStoreStaffs(ctx, boil.GetContextDB(), insert, related...)
}

// AddStoreStaffs adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.StoreStaffs.
// Sets related.R.Staff appropriately.
func (o *Staff) AddStoreStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StoreStaff) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StaffID = o.StaffID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `store_staffs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
				strmangle.WhereClause("`", "`", 0, storeStaffPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.StaffID, rel.StoreID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StaffID = o.StaffID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			StoreStaffs: related,
		}
	} else {
		o.R.StoreStaffs = append(o.R.StoreStaffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeStaffR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// Staffs retrieves all the records using an executor.
func Staffs(mods ...qm.QueryMod) staffQuery {
	mods = append(mods, qm.From("`staffs`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`staffs`.*"})
	}

	return staffQuery{q}
}

// FindStaffG retrieves a single record by ID.
func FindStaffG(ctx context.Context, staffID int, selectCols ...string) (*Staff, error) {
	return FindStaff(ctx, boil.GetContextDB(), staffID, selectCols...)
}

// FindStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaff(ctx context.Context, exec boil.ContextExecutor, staffID int, selectCols ...string) (*Staff, error) {
	staffObj := &Staff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `staffs` where `staff_id`=?", sel,
	)

	q := queries.Raw(query, staffID)

	err := q.Bind(ctx, exec, staffObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from staffs")
	}

	if err = staffObj.doAfterSelectHooks(ctx, exec); err != nil {
		return staffObj, err
	}

	return staffObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Staff) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Staff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staffs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffInsertCacheMut.RLock()
	cache, cached := staffInsertCache[key]
	staffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffType, staffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `staffs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `staffs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `staffs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into staffs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StaffID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for staffs")
	}

CacheNoHooks:
	if !cached {
		staffInsertCacheMut.Lock()
		staffInsertCache[key] = cache
		staffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Staff record using the global executor.
// See Update for more documentation.
func (o *Staff) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Staff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Staff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staffUpdateCacheMut.RLock()
	cache, cached := staffUpdateCache[key]
	staffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `staffs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, append(wl, staffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for staffs")
	}

	if !cached {
		staffUpdateCacheMut.Lock()
		staffUpdateCache[key] = cache
		staffUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q staffQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q staffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for staffs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StaffSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `staffs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all staff")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Staff) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLStaffUniqueColumns = []string{
	"staff_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Staff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staffs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStaffUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffUpsertCacheMut.RLock()
	cache, cached := staffUpsertCache[key]
	staffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert staffs, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`staffs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `staffs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffType, staffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for staffs")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(staffType, staffMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for staffs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for staffs")
	}

CacheNoHooks:
	if !cached {
		staffUpsertCacheMut.Lock()
		staffUpsertCache[key] = cache
		staffUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Staff record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Staff) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Staff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Staff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Staff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffPrimaryKeyMapping)
	sql := "DELETE FROM `staffs` WHERE `staff_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for staffs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q staffQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q staffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no staffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staffs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o StaffSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `staffs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staffs")
	}

	if len(staffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Staff) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Staff provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Staff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaff(ctx, exec, o.StaffID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty StaffSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `staffs`.* FROM `staffs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StaffSlice")
	}

	*o = slice

	return nil
}

// StaffExistsG checks if the Staff row exists.
func StaffExistsG(ctx context.Context, staffID int) (bool, error) {
	return StaffExists(ctx, boil.GetContextDB(), staffID)
}

// StaffExists checks if the Staff row exists.
func StaffExists(ctx context.Context, exec boil.ContextExecutor, staffID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `staffs` where `staff_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, staffID)
	}
	row := exec.QueryRowContext(ctx, sql, staffID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if staffs exists")
	}

	return exists, nil
}

// Exists checks if the Staff row exists.
func (o *Staff) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StaffExists(ctx, exec, o.StaffID)
}
